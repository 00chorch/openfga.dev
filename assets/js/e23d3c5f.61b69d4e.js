"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[3416],{95135:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var t=r(85893),s=r(11151),i=r(5270),o=r(74866),a=r(85162);const l={title:"Docker Setup Guide",description:"Setting up an OpenFGA server with Docker",sidebar_position:1,slug:"/getting-started/setup-openfga/docker"},c="\ud83d\udc33 Setup OpenFGA with Docker",d={id:"content/getting-started/setup-openfga/docker-setup",title:"Docker Setup Guide",description:"Setting up an OpenFGA server with Docker",source:"@site/docs/content/getting-started/setup-openfga/docker-setup.mdx",sourceDirName:"content/getting-started/setup-openfga",slug:"/getting-started/setup-openfga/docker",permalink:"/docs/getting-started/setup-openfga/docker",draft:!1,unlisted:!1,editUrl:"https://github.com/openfga/openfga.dev/edit/main/docs/content/getting-started/setup-openfga/docker-setup.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Docker Setup Guide",description:"Setting up an OpenFGA server with Docker",sidebar_position:1,slug:"/getting-started/setup-openfga/docker"},sidebar:"docs",previous:{title:"Setup OpenFGA",permalink:"/docs/getting-started/setup-openfga/overview"},next:{title:"Kubernetes Setup Guide",permalink:"/docs/getting-started/setup-openfga/kubernetes"}},h={},p=[{value:"Step By Step",id:"step-by-step",level:2},{value:"Configuring The Server",id:"configuring-the-server",level:2},{value:"Configuring Data Storage",id:"configuring-data-storage",level:3},{value:"Postgres",id:"postgres",level:4},{value:"MySQL",id:"mysql",level:4},{value:"Configuring Authentication",id:"configuring-authentication",level:3},{value:"Pre-shared Key Authentication",id:"pre-shared-key-authentication",level:4},{value:"OIDC",id:"oidc",level:4},{value:"Playground",id:"playground",level:3},{value:"Profiler (pprof)",id:"profiler-pprof",level:3},{value:"Health Check",id:"health-check",level:2},{value:"Experimental Features",id:"experimental-features",level:2},{value:"Telemetry",id:"telemetry",level:2},{value:"Metrics",id:"metrics",level:3},{value:"Tracing",id:"tracing",level:3},{value:"Logging",id:"logging",level:3},{value:"Related Sections",id:"related-sections",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"-setup-openfga-with-docker",children:"\ud83d\udc33 Setup OpenFGA with Docker"}),"\n",(0,t.jsx)(i.AH,{}),"\n",(0,t.jsx)(n.p,{children:"This article explains how to start your own OpenFGA server using Docker, and how to configure it."}),"\n",(0,t.jsx)(n.h2,{id:"step-by-step",children:"Step By Step"}),"\n",(0,t.jsx)(n.p,{children:"If you want to run OpenFGA locally as a Docker container, follow these steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"https://docs.docker.com/get-docker/",children:"Install Docker"})," (if not already installed)."]}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"docker pull openfga/openfga"})," to get the latest docker image."]}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"docker run -p 8080:8080 -p 8081:8081 -p 3000:3000 openfga/openfga run"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["This will start an HTTP server and gRPC server with the default configuration options. Port 8080 is used to serve the HTTP API, 8081 is used to serve the gRPC API, and 3000 is used for the ",(0,t.jsx)(n.a,{href:"#playground",children:"Playground"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"configuring-the-server",children:"Configuring The Server"}),"\n",(0,t.jsxs)(n.p,{children:["You may configure the OpenFGA server with a ",(0,t.jsx)(n.code,{children:"config.yaml"})," file. The ",(0,t.jsx)(n.code,{children:"config.yaml"})," can be specified in either:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"/etc/openfga"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"$HOME/.openfga"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"."})," (i.e., the current working directory)."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The OpenFGA server will search for the configuration file in the above order."}),"\n",(0,t.jsx)(n.p,{children:"Here is a sample configuration to run OpenFGA with a Postgres database and using a preshared key for authentication:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'datastore:\n  engine: postgres\n  uri: postgres://user:password@localhost:5432/mydatabase\nauthn:\n  method: preshared\n  preshared:\n    keys: ["key1", "key2"]\n'})}),"\n",(0,t.jsxs)(n.p,{children:["All possible configurations and their default values are defined in ",(0,t.jsx)(n.a,{href:"https://github.com/openfga/openfga/blob/main/.config-schema.json",children:"config-schema.json"}),"."]}),"\n",(0,t.jsx)(n.admonition,{title:"Information",type:"info",children:(0,t.jsxs)(n.p,{children:["The OpenFGA server supports ",(0,t.jsx)(n.strong,{children:"environment variables"})," for configuration, and they will take priority over your configuration file.\nEach variable must be prefixed with ",(0,t.jsx)(n.code,{children:"OPENFGA_"})," and followed by your option in uppercase (e.g ",(0,t.jsx)(n.code,{children:"--grpc-tls-key"})," becomes ",(0,t.jsx)(n.code,{children:"OPENFGA_GRPC_TLS_KEY"}),")."]})}),"\n",(0,t.jsx)(n.h3,{id:"configuring-data-storage",children:"Configuring Data Storage"}),"\n",(0,t.jsx)(n.p,{children:"OpenFGA supports multiple storage engine options, including:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"memory"})," - The memory storage engine is the default, but it is not persistent (data is lost between server restarts)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"postgres"})," - The Postgres storage engine requires a Postgres instance that the OpenFGA server can reach."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mysql"})," - The MySQL storage engine requires a MySQL instance that the OpenFGA server can reach, and that the connection URI specifies the query ",(0,t.jsx)(n.code,{children:"parseTime=true"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"postgres",children:"Postgres"}),"\n",(0,t.jsxs)(o.Z,{groupId:"installation",children:[(0,t.jsxs)(a.Z,{value:"docker",label:"Docker",children:[(0,t.jsx)(n.p,{children:"Let's assume you want to run OpenFGA and Postgres in containers. The first thing we should do is create a new network as this will make communication between containers a bit simpler:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker network create openfga\n"})}),(0,t.jsx)(n.p,{children:"Start Postgres in the network you created above:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker run -d --name postgres --network=openfga -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=password postgres:14\n"})}),(0,t.jsxs)(n.p,{children:["You should now have Postgres running in a container in the ",(0,t.jsx)(n.code,{children:"openfga"})," network. However, it will not have the tables required for running OpenFGA. You can use the ",(0,t.jsx)(n.code,{children:"migrate"})," command to create the tables. Using the OpenFGA container, this will look like:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'docker run --rm --network=openfga openfga/openfga migrate \\\n    --datastore-engine postgres \\\n    --datastore-uri "postgres://postgres:password@postgres:5432/postgres?sslmode=disable"\n'})}),(0,t.jsx)(n.p,{children:"Finally, start OpenFGA:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker run --name openfga --network=openfga -p 3000:3000 -p 8080:8080 -p 8081:8081 openfga/openfga run \\\n    --datastore-engine postgres \\\n    --datastore-uri 'postgres://postgres:password@postgres:5432/postgres?sslmode=disable'\n"})})]}),(0,t.jsxs)(a.Z,{value:"docker-compose",label:"Docker Compose",children:[(0,t.jsxs)(n.p,{children:["Copy the below code block into a local file named: ",(0,t.jsx)(n.code,{children:"docker-compose.yaml"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'version: \'3.8\'\n\nnetworks:\n  openfga:\n\nservices:\n  postgres:\n    image: postgres:14\n    container_name: postgres\n    networks:\n      - openfga\n    ports:\n      - "5432:5432"\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n    healthcheck:\n      test: [ "CMD-SHELL", "pg_isready -U postgres" ]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  migrate:\n    depends_on:\n      postgres:\n        condition: service_healthy\n    image: openfga/openfga:latest\n    container_name: migrate\n    command: migrate\n    environment:\n      - OPENFGA_DATASTORE_ENGINE=postgres\n      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable\n    networks:\n      - openfga\n\n  openfga:\n    depends_on:\n      migrate:\n        condition: service_completed_successfully\n    image: openfga/openfga:latest\n    container_name: openfga\n    environment:\n      - OPENFGA_DATASTORE_ENGINE=postgres\n      - OPENFGA_DATASTORE_URI=postgres://postgres:password@postgres:5432/postgres?sslmode=disable\n      - OPENFGA_LOG_FORMAT=json\n    command: run\n    networks:\n      - openfga\n    ports:\n      # Needed for the http server\n      - "8080:8080"\n      # Needed for the grpc server (if used)\n      - "8081:8081"\n      # Needed for the playground (Do not enable in prod!)\n      - "3000:3000"\n'})}),(0,t.jsx)(n.p,{children:"In a terminal, navigate to that directory and run:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker-compose up\n"})})]})]}),"\n",(0,t.jsxs)(n.p,{children:["This will start the Postgres database, run ",(0,t.jsx)(n.code,{children:"openfga migrate"})," to configure the database and finally start the OpenFGA server."]}),"\n",(0,t.jsxs)(n.p,{children:["Now you can try to ",(0,t.jsx)(n.a,{href:"/docs/getting-started/create-store",children:"Create a Store"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"mysql",children:"MySQL"}),"\n",(0,t.jsx)(n.p,{children:"Setting up MySQL and OpenFGA is very similar to setting up Postgres and OpenFGA."}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsx)(n.p,{children:"Note that the MySQL datastore has stricter limits for the max length of some fields for tuples compared to other datastore engines, in particular:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"object type is at most 128 characters (down from 256)"}),"\n",(0,t.jsx)(n.li,{children:"object id is at most 128 characters (down from 256)"}),"\n",(0,t.jsx)(n.li,{children:"user is at most 256 characters (down from 512)"}),"\n"]}),(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(o.Z,{groupId:"installation_mysql",children:[(0,t.jsxs)(a.Z,{value:"docker-mysql",label:"Docker",children:[(0,t.jsx)(n.p,{children:"We first make a network:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker network create openfga\n"})}),(0,t.jsx)(n.p,{children:"Then, start MySQL in the network you created above:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker run -d --name mysql --network=openfga -e MYSQL_ROOT_PASSWORD=secret -e MYSQL_DATABASE=openfga mysql:8\n"})}),(0,t.jsxs)(n.p,{children:["You should now have MySQL running in a container in the ",(0,t.jsx)(n.code,{children:"openfga"})," network. But we still have to migrate all the tables to be able to run OpenFGA. You can use the ",(0,t.jsx)(n.code,{children:"migrate"})," command to create the tables. Using the OpenFGA container, this will look like:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker run --rm --network=openfga openfga/openfga migrate \\\n    --datastore-engine mysql \\\n    --datastore-uri 'root:secret@tcp(mysql:3306)/openfga?parseTime=true'\n"})}),(0,t.jsx)(n.p,{children:"Finally, start OpenFGA:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker run --name openfga --network=openfga -p 3000:3000 -p 8080:8080 -p 8081:8081 openfga/openfga run \\\n    --datastore-engine mysql \\\n    --datastore-uri 'root:secret@tcp(mysql:3306)/openfga?parseTime=true'\n"})})]}),(0,t.jsxs)(a.Z,{value:"docker-compose-mysql",label:"Docker Compose",children:[(0,t.jsxs)(n.p,{children:["Copy the below code block into a local file named: ",(0,t.jsx)(n.code,{children:"docker-compose.yaml"})]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"version: '3.8'\n\nnetworks:\n  openfga:\n\nservices:\n  mysql:\n    image: mysql:8\n    container_name: mysql\n    networks:\n      - openfga\n    ports:\n      - \"3306:3306\"\n    environment:\n      - MYSQL_ROOT_PASSWORD=secret\n      - MYSQL_DATABASE=openfga\n    healthcheck:\n      test: [\"CMD\", 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD' ]\n      timeout: 20s\n      retries: 5\n\n  migrate:\n    depends_on:\n        mysql:\n            condition: service_healthy\n    image: openfga/openfga:latest\n    container_name: migrate\n    command: migrate\n    environment:\n      - OPENFGA_DATASTORE_ENGINE=mysql\n      - OPENFGA_DATASTORE_URI=root:secret@tcp(mysql:3306)/openfga?parseTime=true\n    networks:\n      - openfga\n\n  openfga:\n    depends_on:\n      migrate:\n        condition: service_completed_successfully\n    image: openfga/openfga:latest\n    container_name: openfga\n    environment:\n      - OPENFGA_DATASTORE_ENGINE=mysql\n      - OPENFGA_DATASTORE_URI=root:secret@tcp(mysql:3306)/openfga?parseTime=true\n      - OPENFGA_LOG_FORMAT=json\n    command: run\n    networks:\n      - openfga\n    ports:\n      # Needed for the http server\n      - \"8080:8080\"\n      # Needed for the grpc server (if used)\n      - \"8081:8081\"\n      # Needed for the playground (Do not enable in prod!)\n      - \"3000:3000\"\n"})}),(0,t.jsx)(n.p,{children:"In a terminal, navigate to that directory and run:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"docker-compose up\n"})})]})]}),(0,t.jsxs)(n.p,{children:["This will start the MySQL database, run ",(0,t.jsx)(n.code,{children:"openfga migrate"})," to configure the database and finally start the OpenFGA server."]}),(0,t.jsxs)(n.p,{children:["Now you can try to ",(0,t.jsx)(n.a,{href:"/docs/getting-started/create-store",children:"Create a Store"}),"."]}),(0,t.jsx)(n.h3,{id:"configuring-authentication",children:"Configuring Authentication"}),(0,t.jsx)(n.p,{children:"You can configure authentication in your OpenFGA server in three ways: no authentication (the default), pre-shared key authentication or via OIDC."}),(0,t.jsx)(n.h4,{id:"pre-shared-key-authentication",children:"Pre-shared Key Authentication"}),(0,t.jsxs)(n.p,{children:["If using ",(0,t.jsx)(n.strong,{children:"Pre-shared key authentication"}),", you will configure OpenFGA with a secret key and your application calling OpenFGA will have to set an ",(0,t.jsx)(n.code,{children:"Authorization: Bearer <YOUR-KEY-HERE>"})," header. You can configure multiple keys."]}),(0,t.jsx)(n.admonition,{title:"Warning",type:"caution",children:(0,t.jsx)(n.p,{children:"If you are going to use this setup in production, you should enable HTTP TLS in your OpenFGA server. You will need to configure the TLS certificate and key."})})]})]}),"\n",(0,t.jsxs)(o.Z,{groupId:"configuration",children:[(0,t.jsxs)(a.Z,{value:"configuration file",label:"Configuration File",children:[(0,t.jsx)(n.p,{children:"Update the config.yaml file to"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'authn:\n  method: preshared\n  preshared:\n    keys: ["key1", "key2"]\nhttp:\n  tls:\n    enabled: true\n    cert: /Users/myuser/key/server.crt\n    key: /Users/myuser/key/server.key\n'})})]}),(0,t.jsx)(a.Z,{value:"environment variables",label:"Environment Variables",children:(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Configure the authentication method to preshared: ",(0,t.jsx)(n.code,{children:"export OPENFGA_AUTHN_METHOD=preshared"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Configure the authentication keys: ",(0,t.jsx)(n.code,{children:'export OPENFGA_AUTHN_PRESHARED_KEYS="key1,key2"'})]}),"\n",(0,t.jsxs)(n.li,{children:["Enable the HTTP TLS configuration: ",(0,t.jsx)(n.code,{children:"export OPENFGA_HTTP_TLS_ENABLED=true"})]}),"\n",(0,t.jsxs)(n.li,{children:["Configure the HTTP TLS certificate location: ",(0,t.jsx)(n.code,{children:"export OPENFGA_HTTP_TLS_CERT=/Users/myuser/key/server.crt"})]}),"\n",(0,t.jsxs)(n.li,{children:["Configure the HTTP TLS key location: ",(0,t.jsx)(n.code,{children:"export OPENFGA_HTTP_TLS_KEY=/Users/myuser/key/server.key"})]}),"\n"]})}),(0,t.jsxs)(a.Z,{value:"docker",label:"Docker",children:[(0,t.jsx)(n.p,{children:"To configure with pre-shared authentication and enabling TLS in http server with Docker."}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Copy the certificate and key files to your Docker container."}),"\n",(0,t.jsx)(n.li,{children:"Run with the following command:"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'docker run --name openfga --network=openfga -p 3000:3000 -p 8080:8080 -p 8081:8081 openfga/openfga run \\\n    --authn-method=preshared \\\n    --authn-preshared-keys="key1,key2" \\\n    --http-tls-enabled=true \\\n    --http-tls-cert="/Users/myuser/key/server.crt" \\\n    --http-tls-key="/Users/myuser/key/server.key"\n'})})]})]}),"\n",(0,t.jsx)(n.h4,{id:"oidc",children:"OIDC"}),"\n",(0,t.jsx)(n.p,{children:"To configure with OIDC authentication, you will first need to obtain the OIDC issuer and audience from your provider."}),"\n",(0,t.jsx)(n.admonition,{title:"Warning",type:"caution",children:(0,t.jsx)(n.p,{children:"If you are going to use this setup in production, you should enable HTTP TLS in your OpenFGA server. You will need to configure the TLS certificate and key."})}),"\n",(0,t.jsxs)(o.Z,{groupId:"configuration",children:[(0,t.jsxs)(a.Z,{value:"configuration file",label:"Configuration File",children:[(0,t.jsx)(n.p,{children:"Update the config.yaml file to"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'authn:\n  method: oidc\n  oidc:\n    issuer: "oidc-issuer"\n    audience: "oidc-audience"\n\nhttp:\n  tls:\n    enabled: true\n    cert: /Users/myuser/key/server.crt\n    key: /Users/myuser/key/server.key\n'})})]}),(0,t.jsx)(a.Z,{value:"environment variables",label:"Environment Variables",children:(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Configure the authentication method to preshared: ",(0,t.jsx)(n.code,{children:"export OPENFGA_AUTHN_METHOD=oidc"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Configure the authentication keys: ",(0,t.jsx)(n.code,{children:"export OPENFGA_AUTHN_OIDC_ISSUER=oidc-issuer"})]}),"\n",(0,t.jsxs)(n.li,{children:["Configure the authentication keys: ",(0,t.jsx)(n.code,{children:"export OPENFGA_AUTHN_OIDC_audience=oidc-audience"})]}),"\n",(0,t.jsxs)(n.li,{children:["Enable the HTTP TLS configuration: ",(0,t.jsx)(n.code,{children:"export OPENFGA_HTTP_TLS_ENABLED=true"})]}),"\n",(0,t.jsxs)(n.li,{children:["Configure the HTTP TLS certificate location:\n",(0,t.jsx)(n.code,{children:"export OPENFGA_HTTP_TLS_CERT=/Users/myuser/key/server.crt"})]}),"\n",(0,t.jsxs)(n.li,{children:["Configure the HTTP TLS key location:\n",(0,t.jsx)(n.code,{children:"export OPENFGA_HTTP_TLS_KEY=/Users/myuser/key/server.key"})]}),"\n"]})}),(0,t.jsxs)(a.Z,{value:"docker",label:"Docker",children:[(0,t.jsx)(n.p,{children:"To configure with pre-shared authentication and enabling TLS in http server with Docker."}),(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Copy the certificate and key files to your docker container."}),"\n",(0,t.jsx)(n.li,{children:"Run the following command"}),"\n"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'docker run --name openfga --network=openfga -p 3000:3000 -p 8080:8080 -p 8081:8081 openfga/openfga run \\\n    --authn-method=oidc \\\n    --authn-oidc-issuer="oidc-issuer" \\\n    --authn-oidc-audience="oidc-audience" \\\n    --http-tls-enabled=true \\\n    --http-tls-cert="/Users/myuser/key/server.crt" \\\n    --http-tls-key="/Users/myuser/key/server.key"\n'})})]})]}),"\n",(0,t.jsx)(n.h3,{id:"playground",children:"Playground"}),"\n",(0,t.jsx)(n.p,{children:"The Playground facilitates rapid development by allowing you to visualize and model your application's authorization model(s) and manage relationship tuples with a locally running OpenFGA instance."}),"\n",(0,t.jsxs)(n.p,{children:["The Playground is enabled on port 3000 by default and accessible at ",(0,t.jsx)(n.a,{href:"http://localhost:3000/playground",children:"http://localhost:3000/playground"})," (if using Docker, make sure port 3000 is exposed to your local network). To disable the Playground, see ",(0,t.jsx)(n.a,{href:"#configuring-the-server",children:"Configuring the Server"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"profiler-pprof",children:"Profiler (pprof)"}),"\n",(0,t.jsx)(n.admonition,{title:"Warning",type:"caution",children:(0,t.jsx)(n.p,{children:"Continuous profiling can be used in production deployments, but we recommend disabling it unless it is needed to troubleshoot specific performance or memory problems."})}),"\n",(0,t.jsxs)(n.p,{children:["Profiling through ",(0,t.jsx)(n.a,{href:"https://github.com/google/pprof/blob/main/doc/README.md",children:(0,t.jsx)(n.code,{children:"pprof"})})," can be enabled on the OpenFGA server by providing the ",(0,t.jsx)(n.code,{children:"--profiler-enabled"})," flag. For example, in Docker:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"docker run -p 8080:8080 -p 8081:8081 -p 3000:3000 -p 3001:3001 openfga/openfga run --profiler-enabled\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you need to serve the profiler on a different port than the default ",(0,t.jsx)(n.code,{children:"3001"}),", you can do so by specifying the ",(0,t.jsx)(n.code,{children:"--profiler-addr"})," flag. For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"docker run -p 8080:8080 -p 8081:8081 -p 3000:3000 -p 3002:3002 openfga/openfga run --profiler-enabled --profiler-addr :3002\n"})}),"\n",(0,t.jsx)(n.h2,{id:"health-check",children:"Health Check"}),"\n",(0,t.jsxs)(n.p,{children:["OpenFGA is configured with an HTTP health check endpoint ",(0,t.jsx)(n.code,{children:"/healthz"})," and a gRPC health check ",(0,t.jsx)(n.code,{children:"grpc.health.v1.Health/Check"}),", which is wired to datastore testing. Possible response values are"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"UNKNOWN"}),"\n",(0,t.jsx)(n.li,{children:"SERVING"}),"\n",(0,t.jsx)(n.li,{children:"NOT_SERVING"}),"\n",(0,t.jsx)(n.li,{children:"SERVICE_UNKNOWN"}),"\n"]}),"\n",(0,t.jsxs)(o.Z,{groupId:"healthcheck",children:[(0,t.jsx)(a.Z,{value:"health-curl",label:"cURL",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'curl -X GET $FGA_API_HOST/healthz\n\n# {"status":"SERVING"}\n'})})}),(0,t.jsx)(a.Z,{value:"health-grpc",label:"gRPC",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:'# See https://github.com/fullstorydev/grpcurl#installation\ngrpcurl -plaintext $FGA_API_HOST grpc.health.v1.Health/Check\n\n# {"status":"SERVING"}\n'})})})]}),"\n",(0,t.jsx)(n.h2,{id:"experimental-features",children:"Experimental Features"}),"\n",(0,t.jsxs)(n.p,{children:["Various releases of OpenFGA may have experimental features that can be enabled by providing the ",(0,t.jsx)(n.code,{children:"--experimentals"})," flag or the ",(0,t.jsx)(n.code,{children:"experimentals"})," config."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'docker run -p 8080:8080 -p 8081:8081 openfga/openfga run --experimentals="feature1, feature2"\n'})}),"\n",(0,t.jsx)(n.p,{children:"or if you're using environment variables,"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'docker run -p 8080:8080 -p 8081:8081 openfga/openfga -e OPENFGA_EXPERIMENTALS="feature1, feature2" run\n'})}),"\n",(0,t.jsx)(n.p,{children:"The following table enumerates the experimental flags, a description of what they do, and the versions of OpenFGA the flag is supported in:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"OpenFGA Version"}),(0,t.jsx)(n.th,{children:"Status"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"otel-metrics"}),(0,t.jsx)(n.td,{children:"Enables support for exposing OpenFGA metrics through OpenTelemetry"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"0.3.2 <= v < v0.3.5"})}),(0,t.jsxs)(n.td,{children:["became default in ",(0,t.jsx)(n.code,{children:"v0.3.5"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"list-objects"}),(0,t.jsx)(n.td,{children:"Enables ListObjects API"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"0.2.0 <= v < v0.3.3"})}),(0,t.jsxs)(n.td,{children:["became default in ",(0,t.jsx)(n.code,{children:"v0.3.3"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"check-query-cache"}),(0,t.jsx)(n.td,{children:"Enables caching of check subproblem result"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"1.3.1 <= v "})}),(0,t.jsx)(n.td,{children:"currently experimental"})]})]})]}),"\n",(0,t.jsxs)(n.admonition,{title:"Warning",type:"caution",children:[(0,t.jsx)(n.p,{children:"Experimental features are not guaranteed to be stable and may lead to server instabilities. It is not recommended to enable experimental features for anything other than experimentation."}),(0,t.jsx)(n.p,{children:"Experimental feature flags are also not considered part of API compatibility and are subject to change, so please refer to each OpenFGA specific release for a list of the experimental feature flags that can be enabled for that release."})]}),"\n",(0,t.jsx)(n.h2,{id:"telemetry",children:"Telemetry"}),"\n",(0,t.jsxs)(n.p,{children:["OpenFGA telemetry data is collected by default starting on version ",(0,t.jsx)(n.code,{children:"v0.3.5"}),". The telemetry information that is captured includes Metrics, Traces, and Logs."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Please refer to the ",(0,t.jsx)(n.a,{href:"https://github.com/openfga/openfga/blob/main/docker-compose.yaml",children:"docker-compose.yaml"})," file as an example of how to collect Metrics and Tracing in OpenFGA in a Docker environment using the ",(0,t.jsx)(n.a,{href:"https://opentelemetry.io/docs/concepts/data-collection/",children:"OpenTelemetry Collector"}),". This should serve as a good example that you can adjust for your specific deployment scenario."]})}),"\n",(0,t.jsx)(n.h3,{id:"metrics",children:"Metrics"}),"\n",(0,t.jsxs)(n.p,{children:["OpenFGA metrics are collected with the ",(0,t.jsx)(n.a,{href:"https://prometheus.io/docs/concepts/data_model/",children:"Prometheus data format"})," and exposed on address ",(0,t.jsx)(n.code,{children:"0.0.0.0:2112/metrics"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Metrics are exposed by default, but you can disable this with ",(0,t.jsx)(n.code,{children:"--metrics-enabled=false"})," (or ",(0,t.jsx)(n.code,{children:"OPENFGA_METRICS_ENABLED=false"})," environment variable)."]}),"\n",(0,t.jsxs)(n.p,{children:["To set an alternative address, you can provide the ",(0,t.jsx)(n.code,{children:"--metrics-addr"})," flag (",(0,t.jsx)(n.code,{children:"OPENFGA_METRICS_ADDR"})," environment variable). For example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"openfga run --metrics-addr=0.0.0.0:2114\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To see the request latency per endpoint of your OpenFGA deployment, you can provide the ",(0,t.jsx)(n.code,{children:"--metrics-enable-rpc-histograms"})," flag (",(0,t.jsx)(n.code,{children:"OPENFGA_METRICS_ENABLE_RPC_HISTOGRAMS"})," environment variable)."]}),"\n",(0,t.jsx)(n.h3,{id:"tracing",children:"Tracing"}),"\n",(0,t.jsxs)(n.p,{children:["OpenFGA traces can be collected with the ",(0,t.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md",children:"OTLP data format"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Tracing is disabled by default, but you can enable this with the ",(0,t.jsx)(n.code,{children:"--trace-enabled=true"})," (",(0,t.jsx)(n.code,{children:"OPENFGA_TRACE_ENABLED=true"})," environment variable). Traces will be exported by default to address ",(0,t.jsx)(n.code,{children:"0.0.0.0:4317"}),". You can change this address with the ",(0,t.jsx)(n.code,{children:"--trace-otlp-endpoint"})," flag (",(0,t.jsx)(n.code,{children:"OPENFGA_TRACE_OTLP_ENDPOINT"})," environment variable)."]}),"\n",(0,t.jsxs)(n.p,{children:["To increase or decrease the trace sampling ratio, you can provide the ",(0,t.jsx)(n.code,{children:"--trace-sample-ratio"})," flag (",(0,t.jsx)(n.code,{children:"OPENFGA_TRACE_SAMPLE_RATIO"})," env variable)."]}),"\n",(0,t.jsxs)(n.p,{children:["Tracing by default uses a insecure connection. You can enable TLS by using ",(0,t.jsx)(n.code,{children:"--trace-otlp-tls-enabled=true"})," flag or the environment variable ",(0,t.jsx)(n.code,{children:"OPENFGA_TRACE_OTLP_TLS_ENABLED"}),"."]}),"\n",(0,t.jsx)(n.admonition,{title:"Warning",type:"caution",children:(0,t.jsxs)(n.p,{children:["It is not recommended to sample all traces (e.g. ",(0,t.jsx)(n.code,{children:"--trace-sample-ratio=1"}),"). You will need to adjust your sampling ratio based on the amount of traffic your deployment receives. Higher traffic will require less sampling and lower traffic can tolerate higher sampling ratios."]})}),"\n",(0,t.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,t.jsx)(n.p,{children:"OpenFGA generates structured logs by default, and it can be configured with the following flags:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--log-format"}),": sets the log format. Today we support ",(0,t.jsx)(n.code,{children:"text"})," and ",(0,t.jsx)(n.code,{children:"json"})," format."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--log-level"}),": sets the minimum log level (defaults to ",(0,t.jsx)(n.code,{children:"info"}),"). It can be set to ",(0,t.jsx)(n.code,{children:"none"})," to turn off logging."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-sections",children:"Related Sections"}),"\n",(0,t.jsx)(i.$q,{description:"Check the following sections for more on how to use OpenFGA.",relatedLinks:[{title:"Production Best Practices",description:"Learn the best practices of running OpenFGA in a production environment",link:"../running-in-production",id:"./running-in-production"}]})]})}function g(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);