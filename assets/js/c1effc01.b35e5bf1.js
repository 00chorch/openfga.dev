"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[980],{82817:function(e,t,i){i.r(t),i.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c}});var n=i(87462),o=i(63366),a=(i(67294),i(3905)),r=i(6737),s=["components"],l={sidebar_position:5,slug:"/modeling/basics/roles-and-permissions"},p="Roles and Permissions",d={unversionedId:"content/modeling/basics/roles-and-permissions",id:"content/modeling/basics/roles-and-permissions",title:"Roles and Permissions",description:"In this guide you will learn how to model roles and permissions model within  using the  and .",source:"@site/docs/content/modeling/basics/roles-and-permissions.mdx",sourceDirName:"content/modeling/basics",slug:"/modeling/basics/roles-and-permissions",permalink:"/modeling/basics/roles-and-permissions",draft:!1,editUrl:"https://github.com/openfga/openfga.dev/edit/main/docs/content/modeling/basics/roles-and-permissions.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,slug:"/modeling/basics/roles-and-permissions"},sidebar:"docs",previous:{title:"User Groups",permalink:"/modeling/basics/user-groups"},next:{title:"Parent-Child Objects",permalink:"/modeling/basics/parent-child"}},m={},c=[{value:"Before you start",id:"before-you-start",level:2},{value:"Modeling Basics",id:"modeling-basics",level:3},{value:"<ProductName format={ProductNameFormat.ShortForm}/> Concepts",id:"-concepts",level:3},{value:"Step by Step",id:"step-by-step",level:2},{value:"01. Understand how roles work within our trip booking system",id:"01-understand-how-roles-work-within-our-trip-booking-system",level:3},{value:"02. Adding permissions for bookings",id:"02-adding-permissions-for-bookings",level:3},{value:"03. Checking user roles and their permissions",id:"03-checking-user-roles-and-their-permissions",level:3},{value:"Related Sections",id:"related-sections",level:2}],u={toc:c};function k(e){var t=e.components,i=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"roles-and-permissions"},"Roles and Permissions"),(0,a.kt)(r.AH,{mdxType:"DocumentationNotice"}),(0,a.kt)("p",null,"In this guide you will learn how to model roles and permissions model within ",(0,a.kt)(r.rZ,{format:r.v7.ProductLink,mdxType:"ProductName"})," using the ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)(r.uH,{section:"what-is-an-authorization-model",linkName:"authorization model",mdxType:"ProductConcept"}))," and ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)(r.uH,{section:"what-is-a-relationship-tuple",linkName:"relationship tuple",mdxType:"ProductConcept"})),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Roles")," are assigned to ",(0,a.kt)(r.uH,{section:"what-is-a-user",linkName:"users",mdxType:"ProductConcept"})," or a group of users, where any user can have more than one role (",(0,a.kt)("inlineCode",{parentName:"li"},"editor"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"owner"),", etc..)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Permissions")," are what allows users to access certain ",(0,a.kt)(r.uH,{section:"what-is-an-object",linkName:"objects",mdxType:"ProductConcept"})," based on their specific roles (",(0,a.kt)("inlineCode",{parentName:"li"},"device_renamer"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"channel_archiver"),", etc..).")),(0,a.kt)("p",null,"For example, the role ",(0,a.kt)("inlineCode",{parentName:"p"},"viewer")," of a ",(0,a.kt)("inlineCode",{parentName:"p"},"trip")," can have ",(0,a.kt)("strong",{parentName:"p"},"permissions to view bookings")," or the role ",(0,a.kt)("inlineCode",{parentName:"p"},"owners")," can have ",(0,a.kt)("strong",{parentName:"p"},"permissions to add/view bookings to a trip.")),(0,a.kt)(r.S1,{title:"When to use",appearance:"filled",description:(0,a.kt)("div",null,(0,a.kt)("p",null,"When trying to create a role and permissions model within ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"}),".:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create roles by creating relations that can be directly assigned to users"),(0,a.kt)("li",{parentName:"ul"},"Assign permissions by creating relations that users get through other relations")),(0,a.kt)("p",null,"For example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Grant someone an ",(0,a.kt)("inlineCode",{parentName:"li"},"admin")," role that can ",(0,a.kt)("inlineCode",{parentName:"li"},"edit")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"read")," a ",(0,a.kt)("inlineCode",{parentName:"li"},"document")),(0,a.kt)("li",{parentName:"ul"},"Grant someone a ",(0,a.kt)("inlineCode",{parentName:"li"},"security_guard")," role that can ",(0,a.kt)("inlineCode",{parentName:"li"},"live_video_viewer")," on a ",(0,a.kt)("inlineCode",{parentName:"li"},"device")),(0,a.kt)("li",{parentName:"ul"},"Grant someone a ",(0,a.kt)("inlineCode",{parentName:"li"},"viewer")," role that can ",(0,a.kt)("inlineCode",{parentName:"li"},"view_products")," on a ",(0,a.kt)("inlineCode",{parentName:"li"},"shop"))),(0,a.kt)("p",null,"There are advantages to implementing roles and permissions within ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"}),", such as:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Breaking down existing roles to have more fine grained permissions. This allows your application to check whether a ",(0,a.kt)("em",{parentName:"li"},"user")," has access to a certain object without having to explicitly check that specific ",(0,a.kt)("em",{parentName:"li"},"users")," role."),(0,a.kt)("li",{parentName:"ul"},"Introduce new roles/permissions or consolidate roles without affecting your application behavior. For example: if in your app all the checks are for the fine permissions ",(0,a.kt)("inlineCode",{parentName:"li"},"check('bob', 'booking_adder', 'trip:Europe')")," instead of ",(0,a.kt)("inlineCode",{parentName:"li"},"check('bob', 'owner', 'trip:Europe')"),", and then you later decide ",(0,a.kt)("inlineCode",{parentName:"li"},"owners")," can no longer add bookings to a ",(0,a.kt)("inlineCode",{parentName:"li"},"trip"),", you can remove the relation within the ",(0,a.kt)("inlineCode",{parentName:"li"},"trip")," type with no code changes in your application, and all the permissions will automatically honor the change."))),mdxType:"CardBox"}),(0,a.kt)("h2",{id:"before-you-start"},"Before you start"),(0,a.kt)("p",null,"In order to understand this guide correctly you must be familiar with some ",(0,a.kt)(r.uH,{mdxType:"ProductConcept"})," and know how to develop the things that we will list below."),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("p",null,"Assume that you have the following ",(0,a.kt)(r.uH,{section:"what-is-an-authorization-model",linkName:"authorization model",mdxType:"ProductConcept"}),".",(0,a.kt)("br",null),"\nYou have a ",(0,a.kt)(r.uH,{section:"what-is-a-type",linkName:"type",mdxType:"ProductConcept"})," called ",(0,a.kt)("inlineCode",{parentName:"p"},"trip")," that ",(0,a.kt)("em",{parentName:"p"},"users")," can be related to as ",(0,a.kt)("inlineCode",{parentName:"p"},"viewer")," and/or an ",(0,a.kt)("inlineCode",{parentName:"p"},"owner"),".")),(0,a.kt)(r.lG,{configuration:{type_definitions:[{type:"trip",relations:{owner:{this:{}},viewer:{this:{}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("hr",null),(0,a.kt)("p",null,"In addition, you will need to know the following:"),(0,a.kt)("h3",{id:"modeling-basics"},"Modeling Basics"),(0,a.kt)("p",null,"You need to know how to create an authorization model and create a relationship tuple to grant a user access to an object. ",(0,a.kt)("a",{parentName:"p",href:"/modeling/basics/modeling-basics"},"Learn more \u2192")),(0,a.kt)("h3",{id:"-concepts"},(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"})," Concepts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)(r.uH,{section:"what-is-a-type",linkName:"Type",mdxType:"ProductConcept"}),": a class of objects that have similar characteristics"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)(r.uH,{section:"what-is-a-user",linkName:"User",mdxType:"ProductConcept"}),": an entity in the system that can be related to an object"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)(r.uH,{section:"what-is-a-relation",linkName:"Relation",mdxType:"ProductConcept"}),": is a string defined in the type definition of an authorization model that defines the possibility of a relationship between objects of this type and other users in the system"),(0,a.kt)("li",{parentName:"ul"},"An ",(0,a.kt)(r.uH,{section:"what-is-an-object",linkName:"Object",mdxType:"ProductConcept"}),": represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)(r.uH,{section:"what-is-a-relationship-tuple",linkName:"Relationship Tuple",mdxType:"ProductConcept"}),": a grouping consisting of a user, a relation and an object stored in Auth ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"})),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)(r.uH,{section:"what-is-a-relationship",linkName:"Relationship",mdxType:"ProductConcept"}),": ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"})," will be called to check if there is a relationship between a user and an object, indicating that the access is allowed"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/modeling/configuration-language#the-direct-relationship-keyword"},"Direct Relationship Keyword"),": The ",(0,a.kt)("inlineCode",{parentName:"li"},"self")," keyword can be used to indicate direct relationships between users and objects"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)(r.uH,{section:"what-is-a-check-request",linkName:"Check API Request",mdxType:"ProductConcept"})," the Check API Request is used to check for relationships between users and objects"))),(0,a.kt)(r.XQ,{mdxType:"Playground"}),(0,a.kt)("h2",{id:"step-by-step"},"Step by Step"),(0,a.kt)("p",null,"To illustrate modeling Roles and Permissions in ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"}),", we will use a trip booking system where you can have ",(0,a.kt)("inlineCode",{parentName:"p"},"owners")," and/or ",(0,a.kt)("inlineCode",{parentName:"p"},"viewers")," that can have more granular permissions such as adding bookings to a trip or viewing bookings on it."),(0,a.kt)("p",null,"In order to represent this, we need to:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Understand how roles are related to direct relations for our trip booking system"),(0,a.kt)("li",{parentName:"ol"},"Adding implied relations to existing authorization model to define permissions for bookings"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)(r.uH,{section:"what-is-a-check-request",linkName:"Checking",mdxType:"ProductConcept"})," user roles and their permissions based on *relationship tuples* for direct and implied relations")),(0,a.kt)("h3",{id:"01-understand-how-roles-work-within-our-trip-booking-system"},"01. Understand how roles work within our trip booking system"),(0,a.kt)("p",null,"Relating roles within ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"})," can be best described as the following: ",(0,a.kt)("strong",{parentName:"p"},"Roles are relations that can be directly assigned to users.")," Looking at our authorization model, our roles would then be ",(0,a.kt)("inlineCode",{parentName:"p"},"owner")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"viewer"),". Meaning that a specific ",(0,a.kt)("em",{parentName:"p"},"user")," can be an ",(0,a.kt)("inlineCode",{parentName:"p"},"owner")," and/or a ",(0,a.kt)("inlineCode",{parentName:"p"},"viewer"),"."),(0,a.kt)(r.lG,{configuration:{type_definitions:[{type:"trip",relations:{owner:{this:{}},viewer:{this:{}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("h3",{id:"02-adding-permissions-for-bookings"},"02. Adding permissions for bookings"),(0,a.kt)("p",null,"Permissions within ",(0,a.kt)(r.rZ,{format:r.v7.LongForm,mdxType:"ProductName"})," can be best described as the following: ",(0,a.kt)("strong",{parentName:"p"},"Permissions are relations that users get only through other relations.")," To represent permissions, we avoid adding the ",(0,a.kt)("a",{parentName:"p",href:"/modeling/configuration-language#the-direct-relationship-keyword"},(0,a.kt)("strong",{parentName:"a"},"direct relationship keyword"))," (",(0,a.kt)("inlineCode",{parentName:"p"},"self"),") to the relation in the authorization model. Instead, we define the relation from other relations to indicate that it is a permission granted to and implied from a different relation."),(0,a.kt)("p",null,"To add permissions related to bookings, we can add new relations to the ",(0,a.kt)("inlineCode",{parentName:"p"},"trip")," ",(0,a.kt)("em",{parentName:"p"},"object")," type denoting the various actions a user can take on ",(0,a.kt)("inlineCode",{parentName:"p"},"trips")," (view, edit, delete, rename, etc...)"),(0,a.kt)("p",null,"To allow ",(0,a.kt)("inlineCode",{parentName:"p"},"viewers")," of a ",(0,a.kt)("inlineCode",{parentName:"p"},"trip")," to have ",(0,a.kt)("strong",{parentName:"p"},"permissions to view bookings")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"owners")," to have ",(0,a.kt)("strong",{parentName:"p"},"permissions to add/view bookings,")," we would modify the type as the following:"),(0,a.kt)(r.lG,{configuration:{type_definitions:[{type:"trip",relations:{owner:{this:{}},viewer:{this:{}},booking_adder:{computedUserset:{relation:"owner"}},booking_viewer:{union:{child:[{computedUserset:{relation:"viewer"}},{computedUserset:{relation:"owner"}}]}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: notice how both ",(0,a.kt)("inlineCode",{parentName:"p"},"booking_viewer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"booking_adder")," don't have the ",(0,a.kt)("inlineCode",{parentName:"p"},"self")," syntax, this is to ensure that the relation can only be assigned through the ",(0,a.kt)("strong",{parentName:"p"},"role")," and not directly.")),(0,a.kt)("h3",{id:"03-checking-user-roles-and-their-permissions"},"03. Checking user roles and their permissions"),(0,a.kt)("p",null,"Now that our type definitions reflects the roles and permissions on how bookings can be viewed/added. Let's create ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)(r.uH,{section:"what-is-a-relationship-tuple",linkName:"relationship tuples",mdxType:"ProductConcept"}))," to assign roles to ",(0,a.kt)("em",{parentName:"p"},"users")," and then ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)(r.uH,{section:"what-is-a-check-request",linkName:"check",mdxType:"ProductConcept"})),"if ",(0,a.kt)("em",{parentName:"p"},"users")," have the proper permissions."),(0,a.kt)("p",null,"Let us create two relationship tuples:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"that gives ",(0,a.kt)("strong",{parentName:"li"},"bob")," the role of ",(0,a.kt)("inlineCode",{parentName:"li"},"viewer")," on ",(0,a.kt)("inlineCode",{parentName:"li"},"trip"),": ",(0,a.kt)("strong",{parentName:"li"},"Europe"),"."),(0,a.kt)("li",{parentName:"ol"},"that gives ",(0,a.kt)("strong",{parentName:"li"},"alice")," the role of ",(0,a.kt)("inlineCode",{parentName:"li"},"owner")," on ",(0,a.kt)("inlineCode",{parentName:"li"},"trip"),": ",(0,a.kt)("strong",{parentName:"li"},"Europe"),".")),(0,a.kt)(r.Gb,{relationshipTuples:[{_description:"Add bob as viewer on trip:Europe",user:"bob",relation:"viewer",object:"trip:Europe"},{_description:"Add alice as owner on trip:Europe",user:"alice",relation:"owner",object:"trip:Europe"}],mdxType:"WriteRequestViewer"}),(0,a.kt)("p",null,"Now we can check: ",(0,a.kt)("strong",{parentName:"p"},"is bob allowed to view bookings on trip Europe?")),(0,a.kt)(r.uT,{user:"bob",relation:"booking_viewer",object:"trip:Europe",allowed:!0,mdxType:"CheckRequestViewer"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"bob")," is a ",(0,a.kt)("inlineCode",{parentName:"p"},"booking_viewer")," because of the following chain of resolution:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"bob")," is a ",(0,a.kt)("inlineCode",{parentName:"li"},"viewer")," on ",(0,a.kt)("inlineCode",{parentName:"li"},"trip"),": ",(0,a.kt)("strong",{parentName:"li"},"Europe")),(0,a.kt)("li",{parentName:"ol"},"Any user related to the ",(0,a.kt)("em",{parentName:"li"},"object")," ",(0,a.kt)("inlineCode",{parentName:"li"},"trip:"),(0,a.kt)("strong",{parentName:"li"},"Europe")," as ",(0,a.kt)("inlineCode",{parentName:"li"},"viewer")," is also related as a ",(0,a.kt)("inlineCode",{parentName:"li"},"booking_viewer")," (i.e ",(0,a.kt)("inlineCode",{parentName:"li"},"usersRelatedToObjectAs: viewer"),")"),(0,a.kt)("li",{parentName:"ol"},"Therefore, all ",(0,a.kt)("inlineCode",{parentName:"li"},"viewers")," on a given ",(0,a.kt)("inlineCode",{parentName:"li"},"trip")," are ",(0,a.kt)("inlineCode",{parentName:"li"},"booking_viewers"))),(0,a.kt)("p",null,"To confirm that ",(0,a.kt)("strong",{parentName:"p"},"bob is not allowed to add bookings on trip Europe"),", we can do the following check:"),(0,a.kt)(r.uT,{user:"bob",relation:"booking_adder",object:"trip:Europe",allowed:!1,mdxType:"CheckRequestViewer"}),(0,a.kt)("p",null,"We can also check: ",(0,a.kt)("strong",{parentName:"p"},"is alice allowed to view and add bookings on trip Europe?")),(0,a.kt)(r.uT,{user:"alice",relation:"booking_viewer",object:"trip:Europe",allowed:!0,mdxType:"CheckRequestViewer"}),(0,a.kt)(r.uT,{user:"alice",relation:"booking_adder",object:"trip:Europe",allowed:!0,mdxType:"CheckRequestViewer"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"alice")," is a ",(0,a.kt)("inlineCode",{parentName:"p"},"booking_viewer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"booking_adder")," because of the following chain of resolution:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"alice")," is a ",(0,a.kt)("inlineCode",{parentName:"li"},"owner")," on ",(0,a.kt)("inlineCode",{parentName:"li"},"trip"),": ",(0,a.kt)("strong",{parentName:"li"},"Europe")),(0,a.kt)("li",{parentName:"ol"},"Any user related to the ",(0,a.kt)("em",{parentName:"li"},"object")," ",(0,a.kt)("inlineCode",{parentName:"li"},"trip:"),(0,a.kt)("strong",{parentName:"li"},"Europe")," as ",(0,a.kt)("inlineCode",{parentName:"li"},"owner")," is also related as a ",(0,a.kt)("inlineCode",{parentName:"li"},"booking_viewer")),(0,a.kt)("li",{parentName:"ol"},"Any user related to the ",(0,a.kt)("em",{parentName:"li"},"object")," ",(0,a.kt)("inlineCode",{parentName:"li"},"trip:"),(0,a.kt)("strong",{parentName:"li"},"Europe")," as ",(0,a.kt)("inlineCode",{parentName:"li"},"owner")," is also related as a ",(0,a.kt)("inlineCode",{parentName:"li"},"booking_adder")),(0,a.kt)("li",{parentName:"ol"},"Therefore, all ",(0,a.kt)("inlineCode",{parentName:"li"},"owners")," on a given ",(0,a.kt)("inlineCode",{parentName:"li"},"trip")," are ",(0,a.kt)("inlineCode",{parentName:"li"},"booking_viewers")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"booking_adders")," on that trip")),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Note:")," Make sure to use unique ids for each object and user within your application domain when creating relationship tuples for ",(0,a.kt)(r.rZ,{format:r.v7.LongForm,mdxType:"ProductName"}),". We are using first names and simple ids to just illustrate an easy-to-follow example."))),(0,a.kt)("h2",{id:"related-sections"},"Related Sections"),(0,a.kt)(r.$q,{description:"Check the following sections for more on how to model for roles and permissions.",relatedLinks:[{title:"Modeling Concepts: Concentric Relationships",description:"Learn about how to represent a concentric relationships in {ProductName}.",link:"/modeling/concepts/concentric-relationships",id:"../concepts/concentric-relationships"},{title:"Modeling Google Drive",description:"See how to indicate that editors are commenters and viewers in Google Drive.",link:"/modeling/advanced/use-cases/gdrive#01-individual-permissions",id:"../advanced/use-cases/gdrive.mdx#01-individual-permissions"},{title:"Modeling GitHub",description:"See how to indicate that repository admins are writers and readers in GitHub.",link:"/modeling/advanced/use-cases/github#01-permissions-for-individuals-in-an-org",id:"../advanced/use-cases/github.mdx#01-permissions-for-individuals-in-an-org"}],mdxType:"RelatedSection"}))}k.isMDXComponent=!0}}]);