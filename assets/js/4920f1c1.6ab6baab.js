"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[9904],{59580:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=n(87462),o=(n(67294),n(3905)),a=n(30601);const r={sidebar_position:9,slug:"/modeling/multiple-restrictions"},l="Multiple Restrictions",s={unversionedId:"content/modeling/multiple-restrictions",id:"content/modeling/multiple-restrictions",title:"Multiple Restrictions",description:"In this guide we are going to model requiring multiple authorizations before allowing users to perform actions on particular objects using .",source:"@site/docs/content/modeling/multiple-restrictions.mdx",sourceDirName:"content/modeling",slug:"/modeling/multiple-restrictions",permalink:"/docs/modeling/multiple-restrictions",draft:!1,editUrl:"https://github.com/openfga/openfga.dev/edit/main/docs/content/modeling/multiple-restrictions.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,slug:"/modeling/multiple-restrictions"},sidebar:"docs",previous:{title:"Public Access",permalink:"/docs/modeling/public-access"},next:{title:"Custom Roles",permalink:"/docs/modeling/custom-roles"}},d={},c=[{value:"Before You Start",id:"before-you-start",level:2},{value:"Modeling Parent-Child Objects",id:"modeling-parent-child-objects",level:3},{value:"Modeling Roles And Permissions",id:"modeling-roles-and-permissions",level:3},{value:"<ProductName format={ProductNameFormat.ShortForm} /> Concepts",id:"-concepts",level:3},{value:"Step By Step",id:"step-by-step",level:2},{value:"01. Add can_delete Relation To Only Allow Writers That Are Members Of The Ownership Organization",id:"01-add-can_delete-relation-to-only-allow-writers-that-are-members-of-the-ownership-organization",level:3},{value:"02. Verify That Our Solutions Work",id:"02-verify-that-our-solutions-work",level:3},{value:"Related Sections",id:"related-sections",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"multiple-restrictions"},"Multiple Restrictions"),(0,o.kt)(a.AH,{mdxType:"DocumentationNotice"}),(0,o.kt)("p",null,"In this guide we are going to model requiring multiple authorizations before allowing users to perform actions on particular objects using ",(0,o.kt)(a.rZ,{format:a.v7.ProductLink,mdxType:"ProductName"}),".\nFor example, ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(a.uH,{section:"what-is-a-user",linkName:"users",mdxType:"ProductConcept"}))," are allowed to delete a ",(0,o.kt)("inlineCode",{parentName:"p"},"document")," if both of these conditions are met:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"they are a member of the organization that owns the document"),(0,o.kt)("li",{parentName:"ul"},"they have writer permissions on the document")),(0,o.kt)("p",null,"In this way, we prevent other users from deleting such document."),(0,o.kt)(a.S1,{title:"When to use",appearance:"filled",description:(0,o.kt)("div",null,(0,o.kt)("p",null,"This is useful when:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Limiting certain actions (such as deleting or reading sensitive document) to privileged users."),(0,o.kt)("li",{parentName:"ul"},"Adding restrictions and requiring multiple authorization paths before granting access."))),mdxType:"CardBox"}),(0,o.kt)("h2",{id:"before-you-start"},"Before You Start"),(0,o.kt)("p",null,"In order to understand this guide correctly you must be familiar with some ",(0,o.kt)(a.uH,{mdxType:"ProductConcept"})," and know how to develop the things that we will list below."),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("p",null,"You will start with the ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(a.uH,{section:"what-is-an-authorization-model",linkName:"authorization model",mdxType:"ProductConcept"}))," below,\nit represents a ",(0,o.kt)("inlineCode",{parentName:"p"},"document")," ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(a.uH,{section:"what-is-a-type",linkName:"type",mdxType:"ProductConcept"}))," that can have users\n",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)(a.uH,{section:"what-is-a-relation",linkName:"related",mdxType:"ProductConcept"}))," as ",(0,o.kt)("inlineCode",{parentName:"p"},"writer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"organizations")," related as ",(0,o.kt)("inlineCode",{parentName:"p"},"owner"),".\nDocument's ",(0,o.kt)("inlineCode",{parentName:"p"},"can_write")," relation is based on whether user is a writer to the document. The ",(0,o.kt)("inlineCode",{parentName:"p"},"organization")," type can have users related as ",(0,o.kt)("inlineCode",{parentName:"p"},"member"),"."),(0,o.kt)("p",null,"Let us also assume that we have:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)("inlineCode",{parentName:"li"},"document"),' called "planning" owned by the ABC ',(0,o.kt)("inlineCode",{parentName:"li"},"organization"),"."),(0,o.kt)("li",{parentName:"ul"},"Becky is a member of the ABC ",(0,o.kt)("inlineCode",{parentName:"li"},"organization"),"."),(0,o.kt)("li",{parentName:"ul"},"Carl is a member of the XYZ ",(0,o.kt)("inlineCode",{parentName:"li"},"organization"),"."),(0,o.kt)("li",{parentName:"ul"},"Becky and Carl both have ",(0,o.kt)("inlineCode",{parentName:"li"},"writer"),' access to the "planning" ',(0,o.kt)("inlineCode",{parentName:"li"},"document"),"."))),(0,o.kt)(a.lG,{configuration:{type_definitions:[{type:"document",relations:{owner:{this:{}},writer:{this:{}},can_write:{computedUserset:{object:"",relation:"writer"}}}},{type:"organization",relations:{member:{this:{}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,o.kt)("p",null,"The current state of the system is represented by the following relationship tuples being in the system already:"),(0,o.kt)(a.Wz,{relationshipTuples:[{_description:"organization ABC is the owner of planning document",user:"organization:ABC",relation:"owner",object:"document:planning"},{_description:"Becky is a writer to the planning document",user:"becky",relation:"writer",object:"document:planning"},{_description:"Carl is a writer to the planning document",user:"carl",relation:"writer",object:"document:planning"},{_description:"Becky is a member of the organization ABC",user:"becky",relation:"member",object:"organization:ABC"},{_description:"Carl is a member of the organization XYZ",user:"carl",relation:"member",object:"organization:XYZ"}],mdxType:"RelationshipTuplesViewer"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Note that we assign the organization, not the organization's members, as owner to the planning document.")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"In addition, you will need to know the following:"),(0,o.kt)("h3",{id:"modeling-parent-child-objects"},"Modeling Parent-Child Objects"),(0,o.kt)("p",null,"You need to know how to model access based on parent-child relationships, e.g.: folders and documents. ",(0,o.kt)("a",{parentName:"p",href:"/docs/modeling/parent-child"},"Learn more \u2192")),(0,o.kt)("h3",{id:"modeling-roles-and-permissions"},"Modeling Roles And Permissions"),(0,o.kt)("p",null,"You need to know how to model roles for users at the object level and model permissions for those roles. ",(0,o.kt)("a",{parentName:"p",href:"/docs/modeling/roles-and-permissions"},"Learn more \u2192")),(0,o.kt)("h3",{id:"-concepts"},(0,o.kt)(a.rZ,{format:a.v7.ShortForm,mdxType:"ProductName"})," Concepts"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)(a.uH,{section:"what-is-a-type",linkName:"Type",mdxType:"ProductConcept"}),": a class of objects that have similar characteristics"),(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)(a.uH,{section:"what-is-a-user",linkName:"User",mdxType:"ProductConcept"}),": an entity in the system that can be related to an object"),(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)(a.uH,{section:"what-is-a-relation",linkName:"Relation",mdxType:"ProductConcept"}),": is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system"),(0,o.kt)("li",{parentName:"ul"},"An ",(0,o.kt)(a.uH,{section:"what-is-an-object",linkName:"Object",mdxType:"ProductConcept"}),": represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model"),(0,o.kt)("li",{parentName:"ul"},"A ",(0,o.kt)(a.uH,{section:"what-is-a-relationship-tuple",linkName:"Relationship Tuple",mdxType:"ProductConcept"}),": a grouping consisting of a user, a relation and an object stored in ",(0,o.kt)(a.rZ,{format:a.v7.ShortForm,mdxType:"ProductName"})),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/configuration-language#the-intersection-operator"},"Intersection Operator"),": the intersection operator can be used to indicate a relationship exists if the user is in all the sets of users"))),(0,o.kt)("h2",{id:"step-by-step"},"Step By Step"),(0,o.kt)("p",null,"With the above authorization model and relationship tuples, ",(0,o.kt)(a.rZ,{format:a.v7.LongForm,mdxType:"ProductName"})," will correctly respond with ",(0,o.kt)("inlineCode",{parentName:"p"},'{"allowed":true}')," when ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)(a.uH,{section:"what-is-a-check-request",linkName:"check",mdxType:"ProductConcept"})),"is called to see if Carl and Becky can write this ",(0,o.kt)("inlineCode",{parentName:"p"},"document"),"."),(0,o.kt)("p",null,"We can verify that by issuing two check requests:"),(0,o.kt)(a.uT,{user:"becky",relation:"can_write",object:"document:planning",allowed:!0,mdxType:"CheckRequestViewer"}),(0,o.kt)(a.uT,{user:"carl",relation:"can_write",object:"document:planning",allowed:!0,mdxType:"CheckRequestViewer"}),(0,o.kt)("p",null,"What we would like to do is offer a way so that a document can be written by Becky and Carl, but only writers who are also members of the organization that owns the document can remove it."),(0,o.kt)("p",null,"To do this, we need to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#01-add-can_delete-relation-to-only-allow-writers-that-are-members-of-the-ownership-organization"},"Add can_delete relation to only allow writers that are members of the ownership organization")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#02-verify-that-our-solutions-work"},"Verify that our solutions work"))),(0,o.kt)("h3",{id:"01-add-can_delete-relation-to-only-allow-writers-that-are-members-of-the-ownership-organization"},"01. Add can_delete Relation To Only Allow Writers That Are Members Of The Ownership Organization"),(0,o.kt)("p",null,"The first step is to add the relation definition for ",(0,o.kt)("inlineCode",{parentName:"p"},"can_delete")," so that it requires users to be both ",(0,o.kt)("inlineCode",{parentName:"p"},"writer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"member")," of the owner. This is accomplished via the keyword ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration-language#the-intersection-operator"},(0,o.kt)("inlineCode",{parentName:"a"},"and")),"."),(0,o.kt)(a.lG,{configuration:{type_definitions:[{type:"document",relations:{owner:{this:{}},writer:{this:{}},can_write:{computedUserset:{object:"",relation:"writer"}},can_delete:{intersection:{child:[{computedUserset:{object:"",relation:"writer"}},{tupleToUserset:{tupleset:{object:"",relation:"owner"},computedUserset:{object:"",relation:"member"}}}]}}}},{type:"organization",relations:{member:{this:{}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,o.kt)("h3",{id:"02-verify-that-our-solutions-work"},"02. Verify That Our Solutions Work"),(0,o.kt)("p",null,"To verify that our solutions work, we need to check that Becky can delete the planning document because she is a writer AND she is a member of organization:ABC that owns the planning document."),(0,o.kt)(a.uT,{user:"becky",relation:"can_delete",object:"document:planning",allowed:!0,mdxType:"CheckRequestViewer"}),(0,o.kt)("p",null,"However, Carl cannot delete the planning document because although he is a writer, Carl is not a member of organization:ABC that owns the planning document."),(0,o.kt)(a.uT,{user:"carl",relation:"can_delete",object:"document:planning",allowed:!1,mdxType:"CheckRequestViewer"}),(0,o.kt)("h2",{id:"related-sections"},"Related Sections"),(0,o.kt)(a.$q,{description:"Check the following sections for more on how to model privileged access.",relatedLinks:[{title:"Modeling: User Groups",description:"Learn about how to add group members.",link:"./user-groups",id:"./user-groups"},{title:"Modeling: Blocklists",description:"Learn about how to set block lists.",link:"./blocklists",id:"./blocklists"},{title:"Modeling: Public Access",description:"Learn about model public access.",link:"./public-access",id:"./public-access"}],mdxType:"RelatedSection"}))}u.isMDXComponent=!0}}]);