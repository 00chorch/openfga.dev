"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[3666],{1564:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=n(87462),r=(n(67294),n(3905)),i=n(5270),o=n(74866),s=n(85162);const l={title:"Integrate Within a Framework",sidebar_position:5,slug:"/getting-started/framework",description:"Integrating FGA within a framework, such as Fastify or Fiber"},p="Integrate Within a Framework",c={unversionedId:"content/getting-started/framework",id:"content/getting-started/framework",title:"Integrate Within a Framework",description:"Integrating FGA within a framework, such as Fastify or Fiber",source:"@site/docs/content/getting-started/framework.mdx",sourceDirName:"content/getting-started",slug:"/getting-started/framework",permalink:"/docs/getting-started/framework",draft:!1,editUrl:"https://github.com/openfga/openfga.dev/edit/main/docs/content/getting-started/framework.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Integrate Within a Framework",sidebar_position:5,slug:"/getting-started/framework",description:"Integrating FGA within a framework, such as Fastify or Fiber"},sidebar:"docs",previous:{title:"Perform a List Objects call",permalink:"/docs/getting-started/perform-list-objects"},next:{title:"Immutable Authorization Models",permalink:"/docs/getting-started/immutable-models"}},u={},d=[{value:"Before You Start",id:"before-you-start",level:2},{value:"Step By Step",id:"step-by-step",level:2},{value:"01. Install And Setup Framework",id:"01-install-and-setup-framework",level:3},{value:"02. Authenticate And Get User ID",id:"02-authenticate-and-get-user-id",level:3},{value:"03. Integrate The <ProductName format={ProductNameFormat.ShortForm}/> Check API Into The Service",id:"03-integrate-the--check-api-into-the-service",level:3},{value:"Related Sections",id:"related-sections",level:2}],m={toc:d},h="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"integrate-within-a-framework"},"Integrate Within a Framework"),(0,r.kt)(i.AH,{mdxType:"DocumentationNotice"}),(0,r.kt)("p",null,"This section will illustrate how to integrate ",(0,r.kt)(i.rZ,{format:i.v7.LongForm,mdxType:"ProductName"})," within a framework, such as ",(0,r.kt)("a",{parentName:"p",href:"https://www.fastify.io/"},"Fastify")," or ",(0,r.kt)("a",{parentName:"p",href:"https://docs.gofiber.io/"},"Fiber"),"."),(0,r.kt)("h2",{id:"before-you-start"},"Before You Start"),(0,r.kt)(o.Z,{groupId:"languages",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:i.eU.JS_SDK,label:i.UB.get(i.eU.JS_SDK),mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.YY,{mdxType:"SdkSetupPrerequisite"})),(0,r.kt)("li",{parentName:"ol"},"You have ",(0,r.kt)("a",{parentName:"li",href:"/docs/getting-started/install-sdk"},"installed the OpenFGA SDK"),"."),(0,r.kt)("li",{parentName:"ol"},"You have ",(0,r.kt)("a",{parentName:"li",href:"/docs/getting-started/configure-model"},"configured the ",(0,r.kt)("em",{parentName:"a"},"authorization model"))," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/getting-started/update-tuples"},"updated the ",(0,r.kt)("em",{parentName:"a"},"relationship tuples")),"."),(0,r.kt)("li",{parentName:"ol"},"You know how to ",(0,r.kt)("a",{parentName:"li",href:"/docs/getting-started/perform-check"},"perform a Check"),"."),(0,r.kt)("li",{parentName:"ol"},"You have loaded ",(0,r.kt)("inlineCode",{parentName:"li"},"FGA_API_HOST")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"FGA_STORE_ID")," as environment variables."))),(0,r.kt)(s.Z,{value:i.eU.GO_SDK,label:i.UB.get(i.eU.GO_SDK),mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)(i.YY,{mdxType:"SdkSetupPrerequisite"})),(0,r.kt)("li",{parentName:"ol"},"You have ",(0,r.kt)("a",{parentName:"li",href:"/docs/getting-started/install-sdk"},"installed the OpenFGA SDK"),"."),(0,r.kt)("li",{parentName:"ol"},"You have ",(0,r.kt)("a",{parentName:"li",href:"/docs/getting-started/configure-model"},"configured the ",(0,r.kt)("em",{parentName:"a"},"authorization model"))," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/getting-started/update-tuples"},"updated the ",(0,r.kt)("em",{parentName:"a"},"relationship tuples")),"."),(0,r.kt)("li",{parentName:"ol"},"You know how to ",(0,r.kt)("a",{parentName:"li",href:"/docs/getting-started/perform-check"},"perform a Check"),"."),(0,r.kt)("li",{parentName:"ol"},"You have loaded ",(0,r.kt)("inlineCode",{parentName:"li"},"FGA_API_HOST")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"FGA_STORE_ID")," as environment variables.")))),(0,r.kt)("h2",{id:"step-by-step"},"Step By Step"),(0,r.kt)("p",null,"Assume that you want to have a web service for ",(0,r.kt)("inlineCode",{parentName:"p"},"document"),"s using one of the frameworks mentioned above. The service will authenticate users via ",(0,r.kt)("a",{parentName:"p",href:"https://auth0.com/docs/secure/tokens/json-web-tokens"},"JWT tokens"),", which contain the user ID."),(0,r.kt)("admonition",{title:"Note",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The reader should set up their own ",(0,r.kt)("inlineCode",{parentName:"p"},"login")," method based on their OpenID connect provider's documentation.")),(0,r.kt)("p",null,"Assume that you want to provide a route ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /read/{document}")," to return documents depending on whether the authenticated user has access to it."),(0,r.kt)("h3",{id:"01-install-and-setup-framework"},"01. Install And Setup Framework"),(0,r.kt)("p",null,"The first step is to install the framework."),(0,r.kt)(o.Z,{groupId:"languages",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:i.eU.JS_SDK,label:i.UB.get(i.eU.JS_SDK),mdxType:"TabItem"},(0,r.kt)("p",null,"For the context of this example, we will use the ",(0,r.kt)("a",{parentName:"p",href:"https://www.fastify.io/"},"Fastify framework"),". For that we need to install the following packages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/fastify/fastify"},(0,r.kt)("inlineCode",{parentName:"a"},"fastify"))," package that provides the framework itself"),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/fastify/fastify-plugin"},(0,r.kt)("inlineCode",{parentName:"a"},"fastify-plugin"))," package that allows integrating plugins with Fastify"),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/fastify/fastify-jwt"},(0,r.kt)("inlineCode",{parentName:"a"},"fastify-jwt"))," package for processing JWT tokens")),(0,r.kt)("p",null,"Using ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com"},"npm"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install fastify fastify-plugin fastify-jwt\n")),(0,r.kt)("p",null,"Using ",(0,r.kt)("a",{parentName:"p",href:"https://yarnpkg.com"},"yarn"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add fastify fastify-plugin fastify-jwt\n")),(0,r.kt)("p",null,"Next, we setup the web service with the ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /read/{document}")," route in file ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Require the framework and instantiate it\nconst fastify = require('fastify')({ logger: true });\n\n// Declare the route\nfastify.get('/read/:document', async (request, reply) => {\n  return { read: request.params.document };\n});\n\n// Run the server\nconst start = async () => {\n  try {\n    await fastify.listen(3000);\n  } catch (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n};\nstart();\n"))),(0,r.kt)(s.Z,{value:i.eU.GO_SDK,label:i.UB.get(i.eU.GO_SDK),mdxType:"TabItem"},(0,r.kt)("p",null,"For the context of this example, we will use the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.gofiber.io/"},"Fiber framework"),". For that we need to install the following Go packages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.gofiber.io/"},(0,r.kt)("inlineCode",{parentName:"a"},"gofiber/fiber"))," package that provides the Fiber framework itself"),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/gofiber/jwt"},(0,r.kt)("inlineCode",{parentName:"a"},"gofiber/jwt"))," middleware authentication layer for JWT"),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/golang-jwt/jwt"},(0,r.kt)("inlineCode",{parentName:"a"},"golang-jwt"))," package that provides Go support for JWT")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"go get -u github.com/gofiber/fiber/v2 github.com/gofiber/jwt/v3 github.com/golang-jwt/jwt/v4\n")),(0,r.kt)("p",null,"Next, we setup the web service with the ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /read/{document}")," route."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport "github.com/gofiber/fiber/v2"\n\nfunc main() {\n  app := fiber.New()\n\n  app.Get("/read/:document", read)\n\n  app.Listen(":3000")\n}\n\nfunc read(c *fiber.Ctx) error {\n  return c.SendString(c.Params("document"))\n}\n')))),(0,r.kt)("h3",{id:"02-authenticate-and-get-user-id"},"02. Authenticate And Get User ID"),(0,r.kt)("p",null,"Before we can call ",(0,r.kt)(i.rZ,{format:i.v7.LongForm,mdxType:"ProductName"})," to protect the ",(0,r.kt)("inlineCode",{parentName:"p"},"/read/{document}")," route, we need to validate the user's JWT."),(0,r.kt)(o.Z,{groupId:"languages",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:i.eU.JS_SDK,label:i.UB.get(i.eU.JS_SDK),mdxType:"TabItem"},(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"fastify-jwt")," package allows validation of JWT tokens, as well as providing access to the user's identity."),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"jwt-authenticate.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const fp = require('fastify-plugin');\n\nmodule.exports = fp(async function (fastify, opts) {\n  fastify.register(require('fastify-jwt'), {\n    secret: {\n      private: readFileSync(`${path.join(__dirname, 'certs')}/private.key`, 'utf8'),\n      public: readFileSync(`${path.join(__dirname, 'certs')}/public.key`, 'utf8'),\n    },\n    sign: { algorithm: 'RS256' },\n  });\n\n  fastify.decorate('authenticate', async function (request, reply) {\n    try {\n      await request.jwtVerify();\n    } catch (err) {\n      reply.send(err);\n    }\n  });\n});\n")),(0,r.kt)("p",null,"Then, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"preValidation")," hook of a route to protect it and access the user information inside the JWT:"),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"route-read.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports = async function (fastify, opts) {\n  fastify.get(\n    '/read/:document',\n    {\n      preValidation: [fastify.authenticate],\n    },\n    async function (request, reply) {\n      // the user's id is in request.user\n      return { read: request.params.document };\n    },\n  );\n};\n")),(0,r.kt)("p",null,"Finally, update ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js")," to register the newly added hooks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const fastify = require('fastify')({ logger: true });\nconst jwtAuthenticate = require('./jwt-authenticate');\nconst routeread = require('./route-read');\n\nfastify.register(jwtAuthenticate);\nfastify.register(routeread);\n\n// Run the server!\nconst start = async () => {\n  try {\n    await fastify.listen(3000);\n  } catch (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n}\nstart();\n\n"))),(0,r.kt)(s.Z,{value:i.eU.GO_SDK,label:i.UB.get(i.eU.GO_SDK),mdxType:"TabItem"},(0,r.kt)("p",null,"We will now setup middleware to authenticate the incoming JWTs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "crypto/rand"\n  "crypto/rsa"\n  "log"\n\n  "github.com/gofiber/fiber/v2"\n\n  jwtware "github.com/gofiber/jwt/v3"\n  "github.com/golang-jwt/jwt/v4"\n)\n\nvar (\n  // Do not do this in production.\n  // In production, you would have the private key and public key pair generated\n  // in advance. NEVER add a private key to any GitHub repo.\n  privateKey *rsa.PrivateKey\n)\n\nfunc main() {\n  app := fiber.New()\n\n  // Just as a demo, generate a new private/public key pair on each run.\n  rng := rand.Reader\n  var err error\n  privateKey, err = rsa.GenerateKey(rng, 2048)\n  if err != nil {\n    log.Fatalf("rsa.GenerateKey: %v", err)\n  }\n\n  // JWT Middleware\n  app.Use(jwtware.New(jwtware.Config{\n    SigningMethod: "RS256",\n    SigningKey:    privateKey.Public(),\n  }))\n\n  app.Get("/read/:document", read)\n\n  app.Listen(":3000")\n}\n\nfunc read(c *fiber.Ctx) error {\n  user := c.Locals("user").(*jwt.Token)\n  claims := user.Claims.(jwt.MapClaims)\n  name := claims["name"].(string)\n  return c.SendString(name + " read " + c.Params("document"))\n}\n')))),(0,r.kt)("h3",{id:"03-integrate-the--check-api-into-the-service"},"03. Integrate The ",(0,r.kt)(i.rZ,{format:i.v7.ShortForm,mdxType:"ProductName"})," Check API Into The Service"),(0,r.kt)(o.Z,{groupId:"languages",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:i.eU.JS_SDK,label:i.UB.get(i.eU.JS_SDK),mdxType:"TabItem"},(0,r.kt)("p",null,"First, we will create a decorator ",(0,r.kt)("inlineCode",{parentName:"p"},"preauthorize")," to parse the incoming HTTP method as well as name of the document, and set the appropriate ",(0,r.kt)("inlineCode",{parentName:"p"},"relation")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"object")," that we will call Check on."),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"preauthorize.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const fp = require('fastify-plugin');\n\nmodule.exports = fp(async function (fastify, opts) {\n  fastify.decorate('preauthorize', async function (request, reply) {\n    try {\n      switch (request.method) {\n        case 'GET':\n          request.relation = 'reader';\n          break;\n        case 'POST':\n          request.relation = 'writer';\n          break;\n        case 'DELETE':\n        default:\n          request.relation = 'owner';\n          break;\n      }\n      request.object = `document:${request.params.document}`;\n    } catch (err) {\n      reply.send(err);\n    }\n  });\n});\n")),(0,r.kt)("p",null,"Next, we will create a decorator called ",(0,r.kt)("inlineCode",{parentName:"p"},"authorize"),". This decorator will invoke the ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/perform-check"},"Check API")," to see if the user has a relationship with the specified document."),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"authorize.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const fp = require('fastify-plugin');\nconst { OpenFgaClient } = require('@openfga/sdk'); // OR import { OpenFgaClient } from '@openfga/sdk';\n\nmodule.exports = fp(async function (fastify, opts) {\n  fastify.decorate('authorize', async function (request, reply) {\n    try {\n      // configure the openfga api client\n      const fgaClient = new OpenFgaClient({\n        apiScheme: process.env.FGA_API_SCHEME, // Optional. Can be \"http\" or \"https\". Defaults to \"https\"\n        apiHost: process.env.FGA_API_HOST,\n        storeId: process.env.FGA_STORE_ID,\n      });\n      const { allowed } = await fgaClient.check({\n        user: request.user,\n        relation: request.relation,\n        object: request.object,\n      });\n      if (!allowed) {\n        reply.code(401).send(`Not authenticated`);\n      }\n    } catch (err) {\n      reply.send(err);\n    }\n  });\n});\n")),(0,r.kt)("p",null,"We can now update the ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /read/{document}")," route to check for user permissions."),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"route-read.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"module.exports = async function (fastify, opts) {\n  fastify.get(\n    '/read/:document',\n    {\n      preValidation: [fastify.authenticate, fastify.preauthorize, fastify.authorize],\n    },\n    async function (request, reply) {\n      // the user's id is in request.user\n      return { read: request.params.document };\n    },\n  );\n};\n")),(0,r.kt)("p",null,"Finally, we will register the new hooks in ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const fastify = require('fastify')({ logger: true });\nconst jwtAuthenticate = require('./jwt-authenticate');\nconst preauthorize = require('./preauthorize');\nconst authorize = require('./authorize');\nconst routeread = require('./route-read');\n\nfastify.register(jwtAuthenticate);\nfastify.register(preauthorize);\nfastify.register(authorize);\nfastify.register(routeread);\n\nconst start = async () => {\n  try {\n    await fastify.listen(3000);\n  } catch (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n}\nstart();\n"))),(0,r.kt)(s.Z,{value:i.eU.GO_SDK,label:i.UB.get(i.eU.GO_SDK),mdxType:"TabItem"},(0,r.kt)("p",null,"We will create two middlewares:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"preauthorize")," will parse the user's JWT and prepare variables needed to call Check API."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"checkAuthorization")," will call the ",(0,r.kt)("a",{parentName:"li",href:"/docs/getting-started/perform-check"},(0,r.kt)("inlineCode",{parentName:"a"},"Check API"))," to see if the user has a relationship with the specified document.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n  "context"\n  "crypto/rand"\n  "crypto/rsa"\n  "log"\n  "os"\n\n  "github.com/gofiber/fiber/v2"\n\n  jwtware "github.com/gofiber/jwt/v3"\n  "github.com/golang-jwt/jwt/v4"\n  openfga "github.com/openfga/go-sdk"\n  . "github.com/openfga/go-sdk/client"\n)\n\nvar (\n  // Do not do this in production.\n  // In production, you would have the private key and public key pair generated\n  // in advance. NEVER add a private key to any GitHub repo.\n  privateKey *rsa.PrivateKey\n)\n\nfunc main() {\n  app := fiber.New()\n\n  // Just as a demo, generate a new private/public key pair on each run.\n  rng := rand.Reader\n  var err error\n  privateKey, err = rsa.GenerateKey(rng, 2048)\n  if err != nil {\n    log.Fatalf("rsa.GenerateKey: %v", err)\n  }\n\n  // JWT Middleware\n  app.Use(jwtware.New(jwtware.Config{\n    SigningMethod: "RS256",\n    SigningKey:    privateKey.Public(),\n  }))\n\n  app.Use("/read/:document", preauthorize)\n\n  app.Use(checkAuthorization)\n\n  app.Get("/read/:document", read)\n\n  app.Listen(":3000")\n}\n\nfunc read(c *fiber.Ctx) error {\n  user := c.Locals("user").(*jwt.Token)\n  claims := user.Claims.(jwt.MapClaims)\n  name := claims["name"].(string)\n  return c.SendString(name + " read " + c.Params("document"))\n}\n\nfunc preauthorize(c *fiber.Ctx) error {\n  // get the user name from JWT\n  user := c.Locals("user").(*jwt.Token)\n  claims := user.Claims.(jwt.MapClaims)\n  name := claims["name"].(string)\n  c.Locals("username", name)\n\n  // parse the HTTP method\n  switch (c.Method()) {\n    case "GET":\n      c.Locals("relation", "reader")\n    case "POST":\n      c.Locals("relation", "writer")\n    case "DELETE":\n      c.Locals("relation", "owner")\n    default:\n      c.Locals("relation", "owner")\n  }\n\n  // get the object name and prepend with type name "document:"\n  c.Locals("object", "document:" + c.Params("document"))\n  return c.Next()\n}\n\n// Middleware to check whether user is authorized to access document\nfunc checkAuthorization(c *fiber.Ctx) error {\n  fgaClient, err := NewSdkClient(&ClientConfiguration{\n    ApiScheme:      os.Getenv("FGA_API_SCHEME"), // optional. Can be "http" or "https". Defaults to "https"\n    ApiHost:        os.Getenv("FGA_API_HOST"), // required, define without the scheme (e.g. api.fga.example instead of https://api.fga.example)\n    StoreId:        os.Getenv("FGA_STORE_ID"), // optional, not needed for \\`CreateStore\\` and \\`ListStores\\`, required before calling for all other methods\n    AuthorizationModelId: openfga.PtrString(os.Getenv("FGA_MODEL_ID")),  // optional, can be overridden per request\n  })\n\n  if err != nil {\n    return fiber.NewError(fiber.StatusServiceUnavailable, "Unable to build OpenFGA client")\n  }\n\n  body := ClientCheckRequest{\n    User: c.Locals("username").(string),\n    Relation: c.Locals("relation").(string),\n    Object: c.Locals("object").(string),\n  }\n  data, err := fgaClient.OpenFga.Check(context.Background()).Body(body).Execute()\n\n  if err != nil {\n    return fiber.NewError(fiber.StatusServiceUnavailable, "Unable to check for authorization")\n  }\n\n  if !(*data.Allowed) {\n    return fiber.NewError(fiber.StatusUnauthorized, "Unauthorized to access document")\n  }\n\n  // Go to the next middleware\n  return c.Next()\n}\n')))),(0,r.kt)("h2",{id:"related-sections"},"Related Sections"),(0,r.kt)(i.$q,{description:"Take a look at the following sections for examples that you can try when integrating with SDK.",relatedLinks:[{title:"Entitlements",description:"Modeling Entitlements for a System in {ProductName}.",link:"../modeling/advanced/entitlements"},{title:"IoT",description:"Modeling Fine Grained Authorization for an IoT Security Camera System with {ProductName}.",link:"../modeling/advanced/iot"},{title:"Slack",description:"Modeling Authorization for Slack with {ProductName}.",link:"../modeling/advanced/slack"}],mdxType:"RelatedSection"}))}f.isMDXComponent=!0}}]);