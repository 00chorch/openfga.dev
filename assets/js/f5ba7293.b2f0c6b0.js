"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[4464],{22313:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>k,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905)),i=a(5270);const l={title:"Slack",description:"Modeling authorization for Slack",sidebar_position:4,slug:"/modeling/advanced/slack"},o="Modeling Authorization for Slack with <ProductName format={ProductNameFormat.ShortForm}/>",s={unversionedId:"content/modeling/advanced/slack",id:"content/modeling/advanced/slack",title:"Slack",description:"Modeling authorization for Slack",source:"@site/docs/content/modeling/advanced/slack.mdx",sourceDirName:"content/modeling/advanced",slug:"/modeling/advanced/slack",permalink:"/docs/modeling/advanced/slack",draft:!1,editUrl:"https://github.com/openfga/openfga.dev/edit/main/docs/content/modeling/advanced/slack.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Slack",description:"Modeling authorization for Slack",sidebar_position:4,slug:"/modeling/advanced/slack"},sidebar:"docs",previous:{title:"GitHub",permalink:"/docs/modeling/advanced/github"},next:{title:"IoT",permalink:"/docs/modeling/advanced/iot"}},d={},p=[{value:"Before You Start",id:"before-you-start",level:2},{value:"<ProductName format={ProductNameFormat.ShortForm}/> Concepts",id:"-concepts",level:3},{value:"Direct Access",id:"direct-access",level:4},{value:"Modeling Concentric Relationships",id:"modeling-concentric-relationships",level:4},{value:"Concepts &amp; Configuration Language",id:"concepts--configuration-language",level:4},{value:"What you will be modeling",id:"what-you-will-be-modeling",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Defined Scenarios",id:"defined-scenarios",level:3},{value:"Modeling Workspaces &amp; Channels",id:"modeling-workspaces--channels",level:2},{value:"01. Individual Permissions",id:"01-individual-permissions",level:3},{value:"Verification",id:"verification",level:4},{value:"02. Updating The <code>workspace</code> Authorization Model With Implied Relations",id:"02-updating-the-workspace-authorization-model-with-implied-relations",level:3},{value:"03. Updating The Authorization Model To Include Channels",id:"03-updating-the-authorization-model-to-include-channels",level:3},{value:"Implied Relation",id:"implied-relation",level:4},{value:"Updating Relationship Tuples",id:"updating-relationship-tuples",level:4},{value:"<code>#general</code> Channel",id:"general-channel",level:5},{value:"<code>#marketing-internal</code> Channel",id:"marketing-internal-channel",level:5},{value:"<code>#proj-marketing-campaign</code> Channel",id:"proj-marketing-campaign-channel",level:5},{value:"Verification",id:"verification-1",level:4},{value:"Summary",id:"summary",level:2},{value:"Exercises For You",id:"exercises-for-you",level:3}],m={toc:p},c="wrapper";function k(e){let{components:t,...l}=e;return(0,r.kt)(c,(0,n.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"modeling-authorization-for-slack-with-"},"Modeling Authorization for Slack with ",(0,r.kt)(i.rZ,{format:i.v7.ShortForm,mdxType:"ProductName"})),(0,r.kt)(i.AH,{mdxType:"DocumentationNotice"}),(0,r.kt)("p",null,"This tutorial explains how to model permissions for a communication platform like Slack using ",(0,r.kt)(i.rZ,{format:i.v7.ShortForm,mdxType:"ProductName"}),"."),(0,r.kt)(i.S1,{title:"What you will learn",mdxType:"CardBox"},(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"How to indicate relationships between a group of ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)(i.uH,{section:"what-is-a-user",linkName:"users",mdxType:"ProductConcept"}))," and an ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)(i.uH,{section:"what-is-an-object",linkName:"object",mdxType:"ProductConcept"})),".",(0,r.kt)("br",null),"\nUsed here to indicate that all members of a slack workspace can write in a certain channel.",(0,r.kt)("br",null),"\nSee ",(0,r.kt)("a",{parentName:"li",href:"/docs/modeling/user-groups"},"Modeling User Groups")," for more."),(0,r.kt)("li",{parentName:"ul"},"How to Model ",(0,r.kt)("strong",{parentName:"li"},"concentric relationship")," to have a certain ",(0,r.kt)(i.uH,{section:"what-is-a-relation",linkName:"relation",mdxType:"ProductConcept"})," on an object imply another relation on the same object.",(0,r.kt)("br",null),"\nUsed here to indicate that legacy admins have all the permissions of the more granular channels admin.",(0,r.kt)("br",null),"\nSee ",(0,r.kt)("a",{parentName:"li",href:"/docs/modeling/building-blocks/concentric-relationships"},"Modeling Concentric Relationships")," for more."),(0,r.kt)("li",{parentName:"ul"},"How to use ",(0,r.kt)("a",{parentName:"li",href:"/docs/configuration-language#the-union-operator"},(0,r.kt)("strong",{parentName:"a"},"the union operator"))," condition to indicate that a user might have a certain relation with an object if they match any of the criteria indicated."))),(0,r.kt)(i.XQ,{title:"Slack",preset:"slack",example:"Slack",store:"slack",mdxType:"Playground"}),(0,r.kt)("h2",{id:"before-you-start"},"Before You Start"),(0,r.kt)("p",null,"In order to understand this guide correctly you must be familiar with some ",(0,r.kt)(i.rZ,{format:i.v7.LongForm,mdxType:"ProductName"})," concepts and know how to develop the things that we will list below."),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",{id:"-concepts"},(0,r.kt)(i.rZ,{format:i.v7.ShortForm,mdxType:"ProductName"})," Concepts"),(0,r.kt)("p",null,"It would be helpful to have an understanding of some concepts of ",(0,r.kt)(i.rZ,{format:i.v7.ShortForm,mdxType:"ProductName"})," before you start.")),(0,r.kt)("h4",{id:"direct-access"},"Direct Access"),(0,r.kt)("p",null,"You need to know how to create an authorization model and create a relationship tuple to grant a user access to an object. ",(0,r.kt)("a",{parentName:"p",href:"/docs/modeling/direct-access"},"Learn more \u2192")),(0,r.kt)("h4",{id:"modeling-concentric-relationships"},"Modeling Concentric Relationships"),(0,r.kt)("p",null,"You need to know how to update the authorization model to allow having nested relations such as all writers are readers. ",(0,r.kt)("a",{parentName:"p",href:"/docs/modeling/building-blocks/concentric-relationships"},"Learn more \u2192")),(0,r.kt)("h4",{id:"concepts--configuration-language"},"Concepts & Configuration Language"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Some ",(0,r.kt)(i.uH,{mdxType:"ProductConcept"})),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/configuration-language"},"Configuration Language")))),(0,r.kt)("h2",{id:"what-you-will-be-modeling"},"What you will be modeling"),(0,r.kt)("p",null,"Slack is a messaging app for businesses that connects people to the information they need. By bringing people together to work as one unified team, Slack transforms the way organizations communicate. (Source: ",(0,r.kt)("a",{parentName:"p",href:"https://slack.com/intl/en-ca/help/articles/115004071768-What-is-Slack-"},"What is Slack?"),")"),(0,r.kt)("p",null,"In this tutorial, you will build a subset of the Slack permission model (detailed below) in ",(0,r.kt)(i.rZ,{format:i.v7.LongForm,mdxType:"ProductName"}),", using some scenarios to validate the model."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"As reference, you can refer to Slack's publicly available docs:"),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://slack.engineering/role-management-at-slack/"},"Role Management at Slack")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://slack.com/intl/en-ca/help/articles/360018112273-Types-of-roles-in-Slack"},"Types of Roles in Slack")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://slack.com/intl/en-ca/help/articles/201314026-Permissions-by-role-in-Slack"},"Permissions by Role in Slack")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://slack.com/intl/en-ca/help/articles/115005225987-Manage-a-workspace-on-Enterprise-Grid"},"Manage a Workspace on Enterprise Grid")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://slack.com/intl/en-ca/help/articles/360004635551-Manage-channel-posting-permissions-"},"Manage channel posting permissions")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: For brevity, this tutorial will not model all of Slack's permissions. Instead, it will focus on modeling the scenarios outlined below.")),(0,r.kt)("h3",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,"This tutorial will focus on the following sections (this is a partial list of Slack's roles):"),(0,r.kt)("p",null,"Workspace Roles:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Guest"),": This type of user is limited in their ability to use Slack, and is only permitted to see one or multiple delegated channels."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Member"),": This is the base type of user that does not have any particular administrative abilities, but has basic access to the organization's Slack workspaces. When an administrative change needs to be made, these users need the support of admins and owners to make the changes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Legacy Admin"),": This type of user is the basic administrator of any organization, and can make a wide variety of administrative changes across Slack, such as renaming channels, archiving channels, setting up preferences and policies, inviting new users, and installing applications. Users with this role perform the majority of administrative tasks across a team.")),(0,r.kt)("p",null,"System Roles:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Channels Admin"),": This type of user has the permission to archive channels, rename channels, create private channels, and convert public channels into private channels.")),(0,r.kt)("p",null,"Channel Settings:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Visibility"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Public"),": Visible to all members and open to join"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Private"),": Visible to admins and invited members"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://slack.com/intl/en-ca/help/articles/360004635551-Manage-channel-posting-permissions-"},(0,r.kt)("strong",{parentName:"a"},"Posting Permissions")),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Open"),": Anyone can post"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Limited"),": Only allowed members can post")))),(0,r.kt)("h3",{id:"defined-scenarios"},"Defined Scenarios"),(0,r.kt)("p",null,"Use the following scenarios to be able to validate whether the model of the requirements is correct."),(0,r.kt)("p",null,"There will be the following users:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Amy"),(0,r.kt)("li",{parentName:"ul"},"Bob"),(0,r.kt)("li",{parentName:"ul"},"Catherine"),(0,r.kt)("li",{parentName:"ul"},"David"),(0,r.kt)("li",{parentName:"ul"},"Emily")),(0,r.kt)("p",null,"These users will interact in the following scenarios:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You will assume there is a Slack workspace called Sandcastle"),(0,r.kt)("li",{parentName:"ul"},"Amy is a legacy admin of the Sandcastle workspace"),(0,r.kt)("li",{parentName:"ul"},"Bob is a member of the Sandcastle workspace with a channels admin role (Read more about system roles at Slack ",(0,r.kt)("a",{parentName:"li",href:"https://slack.engineering/role-management-at-slack/"},"here"),")"),(0,r.kt)("li",{parentName:"ul"},"Catherine and Emily are normal members of the Sandcastle workspace, they can view all public channels, as well as channels they have been invited to"),(0,r.kt)("li",{parentName:"ul"},"David is a guest user with only view and write access to #proj-marketing-campaign, one of the public channels in the Sandcastle workspace"),(0,r.kt)("li",{parentName:"ul"},"Bob and Emily are in a private channel #marketing-internal in the Sandcastle workspace which only they can view and post to"),(0,r.kt)("li",{parentName:"ul"},"All members of the Sandcastle workspace can view the general channel, but only Amy and Emily can post to it")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Image showing requirements",src:a(82555).Z,width:"1205",height:"461"})),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"In production, it is highly recommended to use unique, immutable identifiers. Names are used in this article to make it easier to read and follow.")),(0,r.kt)("h2",{id:"modeling-workspaces--channels"},"Modeling Workspaces & Channels"),(0,r.kt)("p",null,"The goal by the end of this post is to ask ",(0,r.kt)(i.rZ,{format:i.v7.LongForm,mdxType:"ProductName"}),": Does person X have permission to perform action Y on channel Z? In response, you want to either get a confirmation that person X can indeed do that, or a rejection that they cannot. E.g. does David have access to view #general?"),(0,r.kt)("p",null,"The ",(0,r.kt)(i.rZ,{format:i.v7.LongForm,mdxType:"ProductName"})," is based on ",(0,r.kt)("a",{parentName:"p",href:"https://zanzibar.academy"},"Zanzibar"),", a Relation Based Access Control system. This means it relies on ",(0,r.kt)(i.uH,{section:"what-is-an-object",linkName:"objects",mdxType:"ProductConcept"})," and ",(0,r.kt)(i.uH,{section:"what-is-a-user",linkName:"user",mdxType:"ProductConcept"})," ",(0,r.kt)(i.uH,{section:"what-is-a-relation",linkName:"relations",mdxType:"ProductConcept"})," to perform authorization ",(0,r.kt)(i.uH,{section:"what-is-a-check-request",linkName:"checks",mdxType:"ProductConcept"}),"."),(0,r.kt)("p",null,"Setting aside the permissions, you will start with the roles and learn how to express the requirements in terms of relations you can feed into ",(0,r.kt)(i.rZ,{format:i.v7.ShortForm,mdxType:"ProductName"}),"."),(0,r.kt)("p",null,"The requirements stated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Amy")," is a ",(0,r.kt)("strong",{parentName:"li"},"legacy admin")," of the ",(0,r.kt)("strong",{parentName:"li"},"Sandcastle workspace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Bob")," is a ",(0,r.kt)("strong",{parentName:"li"},"channels admin")," of the ",(0,r.kt)("strong",{parentName:"li"},"Sandcastle workspace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Catherine")," and ",(0,r.kt)("strong",{parentName:"li"},"Emily")," are a normal ",(0,r.kt)("strong",{parentName:"li"},"members")," of the ",(0,r.kt)("strong",{parentName:"li"},"Sandcastle workspace")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"David")," is a ",(0,r.kt)("strong",{parentName:"li"},"guest")," user")),(0,r.kt)("p",null,"Here is how you would express than in ",(0,r.kt)(i.rZ,{format:i.v7.ShortForm,mdxType:"ProductName"}),"'s ",(0,r.kt)(i.uH,{section:"what-is-an-authorization-model",linkName:"authorization model",mdxType:"ProductConcept"}),": You have a ",(0,r.kt)(i.uH,{section:"what-is-a-type",linkName:"type",mdxType:"ProductConcept"}),' called "workspace", and users can be related to it as a legacy_admin, channels_admin, member and guest'),(0,r.kt)(i.lG,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"workspace",relations:{legacy_admin:{this:{}},channels_admin:{this:{}},member:{this:{}},guest:{this:{}}},metadata:{relations:{legacy_admin:{directly_related_user_types:[{type:"user"}]},channels_admin:{directly_related_user_types:[{type:"user"}]},member:{directly_related_user_types:[{type:"user"}]},guest:{directly_related_user_types:[{type:"user"}]}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Objects")," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"workspace")," have users related to them as:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Legacy Admin (",(0,r.kt)("inlineCode",{parentName:"li"},"legacy_admin"),")"),(0,r.kt)("li",{parentName:"ul"},"Channels Admin (",(0,r.kt)("inlineCode",{parentName:"li"},"channels_admin"),")"),(0,r.kt)("li",{parentName:"ul"},"Member (",(0,r.kt)("inlineCode",{parentName:"li"},"member"),")"),(0,r.kt)("li",{parentName:"ul"},"Guest (",(0,r.kt)("inlineCode",{parentName:"li"},"guest"),")")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/configuration-language#the-direct-relationship-type-restrictions"},"Direct relationship type restrictions")," indicate that a user can have a ",(0,r.kt)(i.uH,{section:"what-are-direct-and-implied-relationships",linkName:"direct relationship",mdxType:"ProductConcept"})," with an object of the type the relation specifies.")),(0,r.kt)("h3",{id:"01-individual-permissions"},"01. Individual Permissions"),(0,r.kt)("p",null,"To keep things simple and focus on ",(0,r.kt)(i.rZ,{mdxType:"ProductName"})," rather than Slack complexity, we will model only four roles (legacy_admin, channels_admin, member, guest)."),(0,r.kt)("p",null,"At the end of this section we want to have the following permissions represented"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"User"),(0,r.kt)("th",{parentName:"tr",align:null},"Relation"),(0,r.kt)("th",{parentName:"tr",align:null},"Object"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"amy"),(0,r.kt)("td",{parentName:"tr",align:null},"legacy_admin"),(0,r.kt)("td",{parentName:"tr",align:null},"workspace:sandcastle")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"bob"),(0,r.kt)("td",{parentName:"tr",align:null},"channels_admin"),(0,r.kt)("td",{parentName:"tr",align:null},"workspace:sandcastle")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"catherine"),(0,r.kt)("td",{parentName:"tr",align:null},"member"),(0,r.kt)("td",{parentName:"tr",align:null},"workspace:sandcastle")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"david"),(0,r.kt)("td",{parentName:"tr",align:null},"guest"),(0,r.kt)("td",{parentName:"tr",align:null},"workspace:sandcastle")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"emily"),(0,r.kt)("td",{parentName:"tr",align:null},"member"),(0,r.kt)("td",{parentName:"tr",align:null},"workspace:sandcastle")))),(0,r.kt)("p",null,"To represent permissions in ",(0,r.kt)(i.rZ,{mdxType:"ProductName"})," we use ",(0,r.kt)(i.uH,{section:"what-is-a-relation",linkName:"relations",mdxType:"ProductConcept"}),". For workspace permissions we need to create the following ",(0,r.kt)(i.uH,{section:"what-is-an-authorization-model",linkName:"authorization model",mdxType:"ProductConcept"}),":"),(0,r.kt)(i.lG,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"workspace",relations:{legacy_admin:{this:{}},channels_admin:{this:{}},member:{this:{}},guest:{this:{}}},metadata:{relations:{legacy_admin:{directly_related_user_types:[{type:"user"}]},channels_admin:{directly_related_user_types:[{type:"user"}]},member:{directly_related_user_types:[{type:"user"}]},guest:{directly_related_user_types:[{type:"user"}]}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,r.kt)("p",null,"The ",(0,r.kt)(i.rZ,{format:i.v7.LongForm,mdxType:"ProductName"})," service determines if a ",(0,r.kt)(i.uH,{section:"what-is-a-user",linkName:"user",mdxType:"ProductConcept"})," has access to an ",(0,r.kt)(i.uH,{section:"what-is-an-object",linkName:"object",mdxType:"ProductConcept"})," by ",(0,r.kt)(i.uH,{section:"what-is-a-check-request",linkName:"checking",mdxType:"ProductConcept"})," if the user has a relation to that object. Let us examine one of those relations in detail:"),(0,r.kt)(i.lG,{configuration:{schema_version:"1.1",type:"workspace",relations:{member:{this:{}}},metadata:{relations:{member:{directly_related_user_types:[{type:"user"}]}}}},skipVersion:!0,mdxType:"AuthzModelSnippetViewer"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},'The snippet above indicates that objects of type workspace have users related to them as "member" if those users belong to the userset of all users related to the workspace as "member".'),(0,r.kt)("p",{parentName:"admonition"},"This means that a user can be ",(0,r.kt)(i.uH,{section:"what-are-direct-and-implied-relationships",linkName:"directly related",mdxType:"ProductConcept"}),' as a member to an object of type "workspace"')),(0,r.kt)("p",null,"If we want to say ",(0,r.kt)("inlineCode",{parentName:"p"},"amy")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"legacy_admin")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"workspace:sandcastle")," we create this relationship tuple"),(0,r.kt)(i.Gb,{relationshipTuples:[{_description:"Amy is a Legacy Admin in the Sandcastle workspace",user:"user:amy",relation:"legacy_admin",object:"workspace:sandcastle"}],mdxType:"WriteRequestViewer"}),(0,r.kt)("p",null,"We can now ask ",(0,r.kt)(i.rZ,{mdxType:"ProductName"}),' "is ',(0,r.kt)("inlineCode",{parentName:"p"},"amy")," a legacy_admin of ",(0,r.kt)("strong",{parentName:"p"},"workspace:sandcastle"),'?"'),(0,r.kt)(i.uT,{user:"user:amy",relation:"legacy_admin",object:"workspace:sandcastle",allowed:!0,mdxType:"CheckRequestViewer"}),(0,r.kt)("p",null,"We can also say that ",(0,r.kt)("inlineCode",{parentName:"p"},"catherine")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"member")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"workspace:sandcastle"),":"),(0,r.kt)(i.Gb,{relationshipTuples:[{_description:"Catherine is a Member in the Sandcastle workspace",user:"user:catherine",relation:"member",object:"workspace:sandcastle"}],mdxType:"WriteRequestViewer"}),(0,r.kt)("p",null,"And verify by ",(0,r.kt)(i.uH,{section:"what-is-a-check-request",linkName:"asking",mdxType:"ProductConcept"})," ",(0,r.kt)(i.rZ,{mdxType:"ProductName"})),(0,r.kt)(i.uT,{user:"user:catherine",relation:"member",object:"workspace:sandcastle",allowed:!0,mdxType:"CheckRequestViewer"}),(0,r.kt)("p",null,"Catherine, on the other hand, is not a legacy_admin of workspace:sandcastle."),(0,r.kt)(i.uT,{user:"user:catherine",relation:"legacy_admin",object:"workspace:sandcastle",allowed:!1,mdxType:"CheckRequestViewer"}),(0,r.kt)("p",null,"Repeat this process for the other relationships"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json5"},"[\n  {\n    // Bob is a Channels Admin in the Sandcastle workspace\n    user: 'user:bob',\n    relation: 'channels_admin',\n    object: 'workspace:sandcastle',\n  },\n  {\n    // David is a guest in the Sandcastle workspace\n    user: 'user:david',\n    relation: 'guest',\n    object: 'workspace:sandcastle',\n  },\n  {\n    // Emily is a Member in the Sandcastle workspace\n    user: 'user:emily',\n    relation: 'member',\n    object: 'workspace:sandcastle',\n  },\n]\n")),(0,r.kt)(i.Gb,{relationshipTuples:[{_description:"Bob is a Channels Admin in the Sandcastle workspace",user:"user:bob",relation:"channels_admin",object:"workspace:sandcastle"},{_description:"David is a guest in the Sandcastle workspace",user:"user:david",relation:"guest",object:"workspace:sandcastle"},{_description:"Emily is a Member in the Sandcastle workspace",user:"user:emily",relation:"member",object:"workspace:sandcastle"}],mdxType:"WriteRequestViewer"}),(0,r.kt)("h4",{id:"verification"},"Verification"),(0,r.kt)("p",null,"To verify, we can issue ",(0,r.kt)(i.uH,{section:"what-is-a-check-request",linkName:"check request",mdxType:"ProductConcept"})," to verify it is working as expected."),(0,r.kt)(i.uT,{user:"user:amy",relation:"legacy_admin",object:"workspace:sandcastle",allowed:!0,mdxType:"CheckRequestViewer"}),(0,r.kt)("p",null,"Let's try to verify the followings:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"User"),(0,r.kt)("th",{parentName:"tr",align:null},"Object"),(0,r.kt)("th",{parentName:"tr",align:null},"Relation"),(0,r.kt)("th",{parentName:"tr",align:null},"Query"),(0,r.kt)("th",{parentName:"tr",align:null},"Relation?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"legacy_admin")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to workspace:sandcastle as legacy_admin?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"david")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"legacy_admin")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is david related to workspace:sandcastle as legacy_admin?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guest")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to workspace:sandcastle as guest?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"david")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guest")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is david related to workspace:sandcastle as guest?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"member")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to workspace:sandcastle as member?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"david")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"member")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is david related to workspace:sandcastle as member?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h3",{id:"02-updating-the-workspace-authorization-model-with-implied-relations"},"02. Updating The ",(0,r.kt)("inlineCode",{parentName:"h3"},"workspace")," Authorization Model With Implied Relations"),(0,r.kt)("p",null,"Some of the queries that you ran earlier, while returning the correct response, do not match reality. One of which is:"),(0,r.kt)(i.uT,{user:"user:amy",relation:"member",object:"workspace:sandcastle",allowed:!1,mdxType:"CheckRequestViewer"}),(0,r.kt)("p",null,"As you saw before, running this query will return ",(0,r.kt)("inlineCode",{parentName:"p"},"amy is not a member of workspace:sandcastle"),", which is correct based on the data you have given ",(0,r.kt)(i.rZ,{format:i.v7.LongForm,mdxType:"ProductName"})," so far. But in reality, Amy, who is a ",(0,r.kt)("inlineCode",{parentName:"p"},"legacy_admin")," already has an ",(0,r.kt)(i.uH,{section:"what-are-direct-and-implied-relationships",linkName:"implied",mdxType:"ProductConcept"})," ",(0,r.kt)("inlineCode",{parentName:"p"},"channels_admin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"member")," relations. In fact anyone (other than a guest) is a ",(0,r.kt)("inlineCode",{parentName:"p"},"member")," of the workspace."),(0,r.kt)("p",null,"To change this behavior, we will update our system with a ",(0,r.kt)("a",{parentName:"p",href:"/docs/modeling/building-blocks/concentric-relationships"},(0,r.kt)("strong",{parentName:"a"},"concentric relationship"))," model."),(0,r.kt)("p",null,"With the following updated ",(0,r.kt)(i.uH,{section:"what-is-a-type-definition",linkName:"authorization model",mdxType:"ProductConcept"}),", you are informing ",(0,r.kt)(i.rZ,{format:i.v7.LongForm,mdxType:"ProductName"})," that any user who is related to a workspace as ",(0,r.kt)("inlineCode",{parentName:"p"},"legacy_admin"),", is also related as a ",(0,r.kt)("inlineCode",{parentName:"p"},"channels_admin")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"member")," ."),(0,r.kt)(i.lG,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"workspace",relations:{legacy_admin:{this:{}},channels_admin:{union:{child:[{this:{}},{computedUserset:{relation:"legacy_admin"}}]}},member:{union:{child:[{this:{}},{computedUserset:{relation:"channels_admin"}},{computedUserset:{relation:"legacy_admin"}}]}},guest:{this:{}}},metadata:{relations:{legacy_admin:{directly_related_user_types:[{type:"user"}]},channels_admin:{directly_related_user_types:[{type:"user"}]},member:{directly_related_user_types:[{type:"user"}]},guest:{directly_related_user_types:[{type:"user"}]}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,r.kt)("p",null,"We can then verify ",(0,r.kt)("inlineCode",{parentName:"p"},"amy")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"member")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"workspace:sandcastle"),"."),(0,r.kt)(i.uT,{user:"user:amy",relation:"member",object:"workspace:sandcastle",allowed:!0,mdxType:"CheckRequestViewer"}),(0,r.kt)("p",null,"We can check for other users and relationships."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"User"),(0,r.kt)("th",{parentName:"tr",align:null},"Object"),(0,r.kt)("th",{parentName:"tr",align:null},"Relation"),(0,r.kt)("th",{parentName:"tr",align:null},"Query"),(0,r.kt)("th",{parentName:"tr",align:null},"Relation?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"legacy_admin")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to workspace:sandcastle as legacy_admin?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"david")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"legacy_admin")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is david related to workspace:sandcastle as legacy_admin?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guest")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to workspace:sandcastle as guest?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"david")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guest")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is david related to workspace:sandcastle as guest?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"member")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to workspace:sandcastle as member?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"david")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"member")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is david related to workspace:sandcastle as member?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h3",{id:"03-updating-the-authorization-model-to-include-channels"},"03. Updating The Authorization Model To Include Channels"),(0,r.kt)("p",null,"So far, you have modeled the users' ",(0,r.kt)(i.uH,{section:"what-is-a-relation",linkName:"relations",mdxType:"ProductConcept"})," to the workspace itself. In this task you will expand the model to include the relations concerning the channels."),(0,r.kt)("p",null,"By the end of it, you will run some queries to check whether a user can view or write to a certain channel. Queries such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is david related to channel:general as viewer?")," (expected answer: No relation, as David is a guest user with only a relation to #proj-marketing-campaign)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is david related to channel:proj_marketing_campaign as viewer?")," (expected answer: There is a relation, as there is a relation between David and #proj-marketing-campaign as a writer)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is bob related to channel:general as viewer?")," (expected answer: There is a relation, as Bob is a member of the Sandcastle workspace, and all members of the workspace have a viewer relation to #general)")),(0,r.kt)("p",null,"The requirements are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Amy"),", ",(0,r.kt)("strong",{parentName:"li"},"Bob"),", ",(0,r.kt)("strong",{parentName:"li"},"Catherine")," and ",(0,r.kt)("strong",{parentName:"li"},"Emily"),", are normal members of the Sandcastle workspace, they can ",(0,r.kt)("strong",{parentName:"li"},"view")," all ",(0,r.kt)("strong",{parentName:"li"},"public channels"),", in this case: #general and #proj-marketing-campaign"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"David"),", a guest user, has only ",(0,r.kt)("strong",{parentName:"li"},"view")," and ",(0,r.kt)("strong",{parentName:"li"},"write")," access to the ",(0,r.kt)("strong",{parentName:"li"},"#proj-marketing-campaign channel")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Bob")," and ",(0,r.kt)("strong",{parentName:"li"},"Emily")," are the only ones with either ",(0,r.kt)("strong",{parentName:"li"},"view")," or ",(0,r.kt)("strong",{parentName:"li"},"write")," access to the ",(0,r.kt)("strong",{parentName:"li"},"#marketing-internal channel")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Amy")," and ",(0,r.kt)("strong",{parentName:"li"},"Emily")," are the only ones with ",(0,r.kt)("strong",{parentName:"li"},"write")," access to the ",(0,r.kt)("strong",{parentName:"li"},"#general channel"))),(0,r.kt)("p",null,"The possible relations to channels are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Workspace includes the channel, consider the relation that of a ",(0,r.kt)("strong",{parentName:"li"},"parent workspace")),(0,r.kt)("li",{parentName:"ul"},"A user can be a ",(0,r.kt)("strong",{parentName:"li"},"viewer")," and/or ",(0,r.kt)("strong",{parentName:"li"},"writer")," on a channel")),(0,r.kt)("p",null,"The authorization model already has a section describing the workspace, what remains is describing the channel. That can be done by adding the following section to the configuration above:"),(0,r.kt)(i.lG,{configuration:{schema_version:"1.1",type:"channel",relations:{parent_workspace:{this:{}},writer:{this:{}},viewer:{this:{}}},metadata:{relations:{parent_workspace:{directly_related_user_types:[{type:"workspace"}]},writer:{directly_related_user_types:[{type:"user"},{type:"workspace",relation:"legacy_admin"},{type:"workspace",relation:"channels_admin"},{type:"workspace",relation:"member"},{type:"workspace",relation:"guest"}]},viewer:{directly_related_user_types:[{type:"user"},{type:"workspace",relation:"legacy_admin"},{type:"workspace",relation:"channels_admin"},{type:"workspace",relation:"member"},{type:"workspace",relation:"guest"}]}}}},skipVersion:!0,mdxType:"AuthzModelSnippetViewer"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The configuration snippet above describes a channel that can have the following relations:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"workspaces related to it as ",(0,r.kt)("inlineCode",{parentName:"li"},"parent_workspace")),(0,r.kt)("li",{parentName:"ul"},"users related to it as ",(0,r.kt)("inlineCode",{parentName:"li"},"writer")),(0,r.kt)("li",{parentName:"ul"},"users related to it as ",(0,r.kt)("inlineCode",{parentName:"li"},"viewer")))),(0,r.kt)("h4",{id:"implied-relation"},"Implied Relation"),(0,r.kt)("p",null,"There is an ",(0,r.kt)(i.uH,{section:"what-are-direct-and-implied-relationships",linkName:"implied relation",mdxType:"ProductConcept"})," that anyone who can write to a channel can also read from it, so the authorization model can be modified to be:"),(0,r.kt)(i.lG,{configuration:{schema_version:"1.1",type:"channel",relations:{parent_workspace:{this:{}},writer:{this:{}},viewer:{union:{child:[{this:{}},{computedUserset:{relation:"writer"}}]}}},metadata:{relations:{parent_workspace:{directly_related_user_types:[{type:"workspace"}]},writer:{directly_related_user_types:[{type:"user"},{type:"workspace",relation:"legacy_admin"},{type:"workspace",relation:"channels_admin"},{type:"workspace",relation:"member"},{type:"workspace",relation:"guest"}]},viewer:{directly_related_user_types:[{type:"user"},{type:"workspace",relation:"legacy_admin"},{type:"workspace",relation:"channels_admin"},{type:"workspace",relation:"member"},{type:"workspace",relation:"guest"}]}}}},skipVersion:!0,mdxType:"AuthzModelSnippetViewer"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Note that the channel type definition has been updated to indicate that viewer is the union of:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"the set of users with a ",(0,r.kt)(i.uH,{section:"what-are-direct-and-implied-relationships",linkName:"direct",mdxType:"ProductConcept"})," viewer relation to this object"),(0,r.kt)("li",{parentName:"ul"},"the set of users with writer relations to this object"))),(0,r.kt)("p",null,"As a result, the authorization model is:"),(0,r.kt)(i.lG,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"workspace",relations:{legacy_admin:{this:{}},channels_admin:{union:{child:[{this:{}},{computedUserset:{relation:"legacy_admin"}}]}},member:{union:{child:[{this:{}},{computedUserset:{relation:"channels_admin"}},{computedUserset:{relation:"legacy_admin"}}]}},guest:{this:{}}},metadata:{relations:{legacy_admin:{directly_related_user_types:[{type:"user"}]},channels_admin:{directly_related_user_types:[{type:"user"}]},member:{directly_related_user_types:[{type:"user"}]},guest:{directly_related_user_types:[{type:"user"}]}}}},{type:"channel",relations:{parent_workspace:{this:{}},writer:{this:{}},viewer:{union:{child:[{this:{}},{computedUserset:{relation:"writer"}}]}}},metadata:{relations:{parent_workspace:{directly_related_user_types:[{type:"workspace"}]},writer:{directly_related_user_types:[{type:"user"},{type:"workspace",relation:"legacy_admin"},{type:"workspace",relation:"channels_admin"},{type:"workspace",relation:"member"},{type:"workspace",relation:"guest"}]},viewer:{directly_related_user_types:[{type:"user"},{type:"workspace",relation:"legacy_admin"},{type:"workspace",relation:"channels_admin"},{type:"workspace",relation:"member"},{type:"workspace",relation:"guest"}]}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,r.kt)("h4",{id:"updating-relationship-tuples"},"Updating Relationship Tuples"),(0,r.kt)("p",null,"What remains is to add the ",(0,r.kt)(i.uH,{section:"what-is-a-relationship-tuple",linkName:"relationship tuples",mdxType:"ProductConcept"})," to indicate the relation between the users, workspace and the channels."),(0,r.kt)("p",null,"The Sandcastle workspace is a parent workspace of the #general, #marketing-internal and #proj-marketing-campaign channels."),(0,r.kt)(i.Gb,{relationshipTuples:[{user:"workspace:sandcastle",relation:"parent_workspace",object:"channel:general"},{user:"workspace:sandcastle",relation:"parent_workspace",object:"channel:marketing_internal"},{user:"workspace:sandcastle",relation:"parent_workspace",object:"channel:proj_marketing_campaign"}],mdxType:"WriteRequestViewer"}),(0,r.kt)("h5",{id:"general-channel"},(0,r.kt)("inlineCode",{parentName:"h5"},"#general")," Channel"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"#general")," channel is a public channel visible to all the members of the workspace. In ",(0,r.kt)(i.rZ,{format:i.v7.ShortForm,mdxType:"ProductName"}),", you represent this relation in the form of the following relationship tuple:"),(0,r.kt)(i.Gb,{relationshipTuples:[{_description:"The set of users related to `workspace:sandcastle` as member are also related to `channel:general` as `viewer`",user:"workspace:sandcastle#member",relation:"viewer",object:"channel:general"}],mdxType:"WriteRequestViewer"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This indicates The set of users related to ",(0,r.kt)("inlineCode",{parentName:"p"},"workspace:sandcastle")," as member are also related to ",(0,r.kt)("inlineCode",{parentName:"p"},"channel:general")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"viewer"))),(0,r.kt)("p",null,"And to indicate that Amy and Emily can write to it:"),(0,r.kt)(i.Gb,{relationshipTuples:[{_description:"Due to the configuration update you added earlier, writer relation is enough to imply a viewer relation",user:"user:amy",relation:"writer",object:"channel:general"},{user:"user:emily",relation:"writer",object:"channel:general"}],mdxType:"WriteRequestViewer"}),(0,r.kt)("h5",{id:"marketing-internal-channel"},(0,r.kt)("inlineCode",{parentName:"h5"},"#marketing-internal")," Channel"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"#marketing-internal")," is visible to only Bob and Emily. They can view and write in it."),(0,r.kt)(i.Gb,{relationshipTuples:[{user:"user:bob",relation:"writer",object:"channel:marketing_internal"},{user:"user:emily",relation:"writer",object:"channel:marketing_internal"}],mdxType:"WriteRequestViewer"}),(0,r.kt)("h5",{id:"proj-marketing-campaign-channel"},(0,r.kt)("inlineCode",{parentName:"h5"},"#proj-marketing-campaign")," Channel"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"#proj-marketing-campaign")," is public to all members of the Sandcastle workspace. They can view and write in it."),(0,r.kt)(i.Gb,{relationshipTuples:[{user:"workspace:sandcastle#member",relation:"writer",object:"channel:proj_marketing_campaign"}],mdxType:"WriteRequestViewer"}),(0,r.kt)("p",null,"David is a guest user who can also view and write to #proj-marketing-campaign"),(0,r.kt)(i.Gb,{relationshipTuples:[{user:"user:david",relation:"writer",object:"channel:proj_marketing_campaign"}],mdxType:"WriteRequestViewer"}),(0,r.kt)("h4",{id:"verification-1"},"Verification"),(0,r.kt)("p",null,"Now that you have added the necessary relationship tuples, you will check to make sure that your configuration is valid."),(0,r.kt)("p",null,"First, we want to ensure david is not related to channel:general as viewer."),(0,r.kt)(i.uT,{user:"user:david",relation:"viewer",object:"channel:general",allowed:!1,mdxType:"CheckRequestViewer"}),(0,r.kt)("p",null,"David should be related to channel:proj_marketing_campaign as viewer."),(0,r.kt)(i.uT,{user:"user:david",relation:"viewer",object:"channel:proj_marketing_campaign",allowed:!0,mdxType:"CheckRequestViewer"}),(0,r.kt)("p",null,"Repeat this for the following relations"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"User"),(0,r.kt)("th",{parentName:"tr",align:null},"Object"),(0,r.kt)("th",{parentName:"tr",align:null},"Relation"),(0,r.kt)("th",{parentName:"tr",align:null},"Query"),(0,r.kt)("th",{parentName:"tr",align:null},"Relation?"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"legacy_admin")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to workspace:sandcastle as legacy_admin?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"member")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to workspace:sandcastle as member?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channels_admin")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to workspace:sandcastle as channels_admin?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel:general")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"writer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to channel:general as writer?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel:general")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"viewer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to channel:general as viewer?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel:marketing_internal")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"writer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to channel:marketing_internal as writer?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"amy")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel:marketing_internal")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"viewer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is amy related to channel:marketing_internal as viewer?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"emily")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel:marketing_internal")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"writer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is emily related to channel:marketing_internal as writer?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"emily")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel:marketing_internal")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"viewer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is emily related to channel:marketing_internal as viewer?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"david")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"guest")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is david related to workspace:sandcastle as guest?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"david")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"workspace:sandcastle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"member")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is david related to workspace:sandcastle as member?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"david")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel:general")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"viewer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is david related to channel:general as viewer?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"david")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel:marketing_internal")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"viewer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is david related to channel:marketing_internal as viewer?")),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"david")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"channel:proj_marketing_campaign")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"viewer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"is david related to channel:proj_marketing_campaign as viewer?")),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Have a basic understanding of ",(0,r.kt)(i.UV,{linkName:"authorization",section:"authentication-vs-authorization",mdxType:"IntroductionSection"})," and ",(0,r.kt)(i.uH,{mdxType:"ProductConcept"}),"."),(0,r.kt)("li",{parentName:"ul"},"Understand how to model authorization for a communication platform like Slack using ",(0,r.kt)(i.rZ,{format:i.v7.ProductLink,mdxType:"ProductName"}),".")),(0,r.kt)("p",null,"In this tutorial, you:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"were introduced to ",(0,r.kt)(i.UV,{linkName:"fine grain authentication",section:"what-is-fine-grained-authorization-fga",mdxType:"IntroductionSection"})," and ",(0,r.kt)(i.rZ,{format:i.v7.ProductLink,mdxType:"ProductName"}),"."),(0,r.kt)("li",{parentName:"ul"},"learned how to build and test an ",(0,r.kt)(i.rZ,{format:i.v7.LongForm,mdxType:"ProductName"})," authorization model for a communication platforms like Slack.")),(0,r.kt)("p",null,"Upcoming tutorials will dive deeper into ",(0,r.kt)(i.rZ,{format:i.v7.LongForm,mdxType:"ProductName"}),", introducing concepts that will improve on the model you built today, and tackling different permission systems, with other relations and requirements that need to be met."),(0,r.kt)(i.XQ,{title:"Slack",preset:"slack",example:"Slack",store:"slack",mdxType:"Playground"}),(0,r.kt)("p",null,"If you are interested in learning more about Authorization and Role Management at Slack, check out the Auth0 Fine Grained Authorization (FGA) team's chat with the Slack engineering team."),(0,r.kt)("figure",{className:"video_container"},(0,r.kt)("iframe",{style:{marginTop:36,borderRadius:8},width:"100%",height:"500",src:"https://www.youtube-nocookie.com/embed/-iVBsagaK5Y",frameBorder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})),(0,r.kt)("h3",{id:"exercises-for-you"},"Exercises For You"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Try adding more relationship tuples to represent other users and channels being added. Then run queries to make sure that the authorization model remains valid."),(0,r.kt)("li",{parentName:"ul"},"Update the configuration to model more Slack permissions (workspace owners, Slack orgs), then add the relationship tuples necessary and run some queries to validate your configuration.")))}k.isMDXComponent=!0},82555:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/slack-01-b6e717f5e865abef206372fda13e528e.svg"}}]);