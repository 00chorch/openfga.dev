"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[3207],{30663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=n(87462),a=(n(67294),n(3905)),o=n(5270);const r={sidebar_position:2,slug:"/interacting/managing-relationships-between-objects",description:"Granting a user access to a particular object through a relationship with another object"},l="Managing Relationships Between Objects",s={unversionedId:"content/interacting/managing-relationships-between-objects",id:"content/interacting/managing-relationships-between-objects",title:"Managing Relationships Between Objects",description:"Granting a user access to a particular object through a relationship with another object",source:"@site/docs/content/interacting/managing-relationships-between-objects.mdx",sourceDirName:"content/interacting",slug:"/interacting/managing-relationships-between-objects",permalink:"/docs/interacting/managing-relationships-between-objects",draft:!1,editUrl:"https://github.com/openfga/openfga.dev/edit/main/docs/content/interacting/managing-relationships-between-objects.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/interacting/managing-relationships-between-objects",description:"Granting a user access to a particular object through a relationship with another object"},sidebar:"docs",previous:{title:"Managing Group Membership",permalink:"/docs/interacting/managing-group-membership"},next:{title:"Transactional Writes",permalink:"/docs/interacting/transactional-writes"}},p={},d=[{value:"Before you start",id:"before-you-start",level:2},{value:"Direct Access",id:"direct-access",level:3},{value:"<ProductName format={ProductNameFormat.ShortForm}/> Concepts",id:"-concepts",level:3},{value:"Step By Step",id:"step-by-step",level:2},{value:"01. Modify Authorization Model",id:"01-modify-authorization-model",level:3},{value:"02. Adding Relationship Tuples Where User Is Another Object",id:"02-adding-relationship-tuples-where-user-is-another-object",level:3},{value:"03. Adding Relationship Tuples To The Other Object",id:"03-adding-relationship-tuples-to-the-other-object",level:3},{value:"04. Validating User Access",id:"04-validating-user-access",level:3},{value:"05. Revoking Access",id:"05-revoking-access",level:3},{value:"Related Sections",id:"related-sections",level:2}],c={toc:d},u="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"managing-relationships-between-objects"},"Managing Relationships Between Objects"),(0,a.kt)(o.AH,{mdxType:"DocumentationNotice"}),(0,a.kt)("p",null,"In this guide you will learn how to grant a user access to a particular object through a relationship with another object."),(0,a.kt)(o.S1,{title:"When to use",appearance:"filled",description:(0,a.kt)("div",null,(0,a.kt)("p",null,"Giving user access through a relationship with another object is helpful because it allows scaling as the number of object grows. For example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"organization that owns many repos"),(0,a.kt)("li",{parentName:"ul"},"team that administers many documents"))),mdxType:"CardBox"}),(0,a.kt)("h2",{id:"before-you-start"},"Before you start"),(0,a.kt)("p",null,"In order to understand this guide correctly you must be familiar with some ",(0,a.kt)(o.uH,{mdxType:"ProductConcept"})," and know how to develop the things that we will list below."),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("p",null,"Assume that you have the following ",(0,a.kt)(o.uH,{section:"what-is-an-authorization-model",linkName:"authorization model",mdxType:"ProductConcept"}),(0,a.kt)("br",null)),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("inlineCode",{parentName:"li"},"repo")," type that can have a ",(0,a.kt)("inlineCode",{parentName:"li"},"admin")," relation"))),(0,a.kt)(o.lG,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"repo",relations:{admin:{this:{}}},metadata:{relations:{admin:{directly_related_user_types:[{type:"user"}]}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("hr",null),(0,a.kt)("p",null,"In addition, you will need to know the following:"),(0,a.kt)("h3",{id:"direct-access"},"Direct Access"),(0,a.kt)("p",null,"You need to know how to create an authorization model and create a relationship tuple to grant a user access to an object. ",(0,a.kt)("a",{parentName:"p",href:"/docs/modeling/direct-access"},"Learn more \u2192")),(0,a.kt)("h3",{id:"-concepts"},(0,a.kt)(o.rZ,{format:o.v7.ShortForm,mdxType:"ProductName"})," Concepts"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)(o.uH,{section:"what-is-a-type",linkName:"Type",mdxType:"ProductConcept"}),": a class of objects that have similar characteristics"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)(o.uH,{section:"what-is-a-user",linkName:"User",mdxType:"ProductConcept"}),": an entity in the system that can be related to an object"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)(o.uH,{section:"what-is-a-relation",linkName:"Relation",mdxType:"ProductConcept"}),": is a string defined in the type definition of an authorization model that defines the possibility of a relationship between an object of the same type as the type definition and a user in the system"),(0,a.kt)("li",{parentName:"ul"},"An ",(0,a.kt)(o.uH,{section:"what-is-an-object",linkName:"Object",mdxType:"ProductConcept"}),": represents an entity in the system. Users' relationships to it can be define through relationship tuples and the authorization model"),(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)(o.uH,{section:"what-is-a-relationship-tuple",linkName:"Relationship Tuple",mdxType:"ProductConcept"}),": a grouping consisting of a user, a relation and an object stored in ",(0,a.kt)(o.rZ,{format:o.v7.ShortForm,mdxType:"ProductName"})))),(0,a.kt)("h2",{id:"step-by-step"},"Step By Step"),(0,a.kt)("p",null,"For the current model, a ",(0,a.kt)(o.uH,{section:"what-is-a-user",linkName:"user",mdxType:"ProductConcept"})," can be related as an ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," to an ",(0,a.kt)(o.uH,{section:"what-is-an-object",linkName:"object",mdxType:"ProductConcept"})," of ",(0,a.kt)(o.uH,{section:"what-is-a-type",linkName:"type",mdxType:"ProductConcept"})," ",(0,a.kt)("inlineCode",{parentName:"p"},"repo"),". If we wanted to have Anne be related to two repos, ",(0,a.kt)("inlineCode",{parentName:"p"},"repo:1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"repo:2"),", we would have to add two ",(0,a.kt)(o.uH,{section:"what-is-a-relationship-tuple",linkName:"relationship tuples",mdxType:"ProductConcept"}),", like so:"),(0,a.kt)(o.Gb,{relationshipTuples:[{user:"user:anne",relation:"admin",object:"repo:1"},{user:"user:anne",relation:"admin",object:"repo:2"}],mdxType:"WriteRequestViewer"}),(0,a.kt)("p",null,"In general, every time we wanted to add a new ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," relationship to a ",(0,a.kt)("inlineCode",{parentName:"p"},"repo")," we'd have to add a new tuple. This doesn't scale as the list of ",(0,a.kt)("inlineCode",{parentName:"p"},"repo"),"s and users grows."),(0,a.kt)("h3",{id:"01-modify-authorization-model"},"01. Modify Authorization Model"),(0,a.kt)("p",null,"Another way of modeling this is to have an authorization model as follows:"),(0,a.kt)(o.lG,{configuration:{schema_version:"1.1",type_definitions:[{type:"user"},{type:"repo",relations:{admin:{union:{child:[{this:{}},{tupleToUserset:{tupleset:{object:"",relation:"owner"},computedUserset:{object:"",relation:"repo_admin"}}}]}},owner:{this:{}}},metadata:{relations:{owner:{directly_related_user_types:[{type:"org"}]},admin:{directly_related_user_types:[{type:"user"}]}}}},{type:"org",relations:{repo_admin:{this:{}}},metadata:{relations:{repo_admin:{directly_related_user_types:[{type:"user"}]}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("p",null,"In this model, we have:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"added a new type ",(0,a.kt)("inlineCode",{parentName:"li"},"org")," with one relation ",(0,a.kt)("inlineCode",{parentName:"li"},"repo_admin"),"."),(0,a.kt)("li",{parentName:"ul"},"added a new relation ",(0,a.kt)("inlineCode",{parentName:"li"},"owner")," for type ",(0,a.kt)("inlineCode",{parentName:"li"},"repo"),"."),(0,a.kt)("li",{parentName:"ul"},"re-defined the relation ",(0,a.kt)("inlineCode",{parentName:"li"},"admin")," for ",(0,a.kt)("inlineCode",{parentName:"li"},"repo"),". A user can be defined as an ",(0,a.kt)("inlineCode",{parentName:"li"},"admin")," directly, as we have seen above, or through the ",(0,a.kt)("inlineCode",{parentName:"li"},"repo_admin from owner")," clause. How this works, for example, is that if ",(0,a.kt)("inlineCode",{parentName:"li"},"user")," is related as ",(0,a.kt)("inlineCode",{parentName:"li"},"repo_admin")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"org:xyz"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"org:xyz")," is related as ",(0,a.kt)("inlineCode",{parentName:"li"},"owner")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"repo:1"),", then ",(0,a.kt)("inlineCode",{parentName:"li"},"user")," is an ",(0,a.kt)("inlineCode",{parentName:"li"},"admin")," of ",(0,a.kt)("inlineCode",{parentName:"li"},"repo:1"),".")),(0,a.kt)("h3",{id:"02-adding-relationship-tuples-where-user-is-another-object"},"02. Adding Relationship Tuples Where User Is Another Object"),(0,a.kt)("p",null,"With this model, we can add tuples representing that an ",(0,a.kt)("inlineCode",{parentName:"p"},"org")," is the ",(0,a.kt)("inlineCode",{parentName:"p"},"owner")," of a ",(0,a.kt)("inlineCode",{parentName:"p"},"repo"),". By adding following relationship tuples, we are indicating that the xyz organization is the owner of repositories with IDs ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"2"),":"),(0,a.kt)(o.Gb,{relationshipTuples:[{user:"org:xyz",relation:"owner",object:"repo:1"},{user:"org:xyz",relation:"owner",object:"repo:2"}],mdxType:"WriteRequestViewer"}),(0,a.kt)("h3",{id:"03-adding-relationship-tuples-to-the-other-object"},"03. Adding Relationship Tuples To The Other Object"),(0,a.kt)("p",null,"Now, imagine we have a new user Becky. If we wanted to have Becky be the ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," of all ",(0,a.kt)("inlineCode",{parentName:"p"},"repo"),"s without having to add one tuple per ",(0,a.kt)("inlineCode",{parentName:"p"},"repo"),", all we need to do is add one tuple that says that Becky is related as ",(0,a.kt)("inlineCode",{parentName:"p"},"repo_admin")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"org:xyz"),"."),(0,a.kt)(o.Gb,{relationshipTuples:[{user:"user:becky",relation:"repo_admin",object:"org:xyz"}],mdxType:"WriteRequestViewer"}),(0,a.kt)("h3",{id:"04-validating-user-access"},"04. Validating User Access"),(0,a.kt)("p",null,"We can now verify that Becky an ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," of all the ",(0,a.kt)("inlineCode",{parentName:"p"},"repo"),"s owned by ",(0,a.kt)("inlineCode",{parentName:"p"},"org:xyz"),":"),(0,a.kt)(o.uT,{user:"user:becky",relation:"admin",object:"repo:1",allowed:!0,mdxType:"CheckRequestViewer"}),(0,a.kt)(o.uT,{user:"user:becky",relation:"admin",object:"repo:2",allowed:!0,mdxType:"CheckRequestViewer"}),(0,a.kt)("h3",{id:"05-revoking-access"},"05. Revoking Access"),(0,a.kt)("p",null,"Suppose now that we want to prevent users from being an ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"repo:1")," via ",(0,a.kt)("inlineCode",{parentName:"p"},"org:xyz"),". We can delete one tuple:"),(0,a.kt)(o.Gb,{deleteRelationshipTuples:[{user:"org:xyz",relation:"owner",object:"repo:1"}],mdxType:"WriteRequestViewer"}),(0,a.kt)("p",null,"With this change, we may now verify that Becky is no longer an ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"repo:1"),"."),(0,a.kt)(o.uT,{user:"user:becky",relation:"admin",object:"repo:1",allowed:!1,mdxType:"CheckRequestViewer"}),(0,a.kt)("h2",{id:"related-sections"},"Related Sections"),(0,a.kt)(o.$q,{description:"Check the following sections for more on how to model relationships between objects.",relatedLinks:[{title:"Modeling Parent-Child Objects",description:"Learn about how to cascade relationships from parent object to child object.",link:"../modeling/parent-child",id:"../modeling/parent-child.mdx"},{title:"Modeling Object to Object Relationships",description:"Learn about modeling patterns on objects that are not specifically tied to a user.",link:"../modeling/building-blocks/object-to-object-relationships",id:"../modeling/building-blocks/object-to-object-relationships.mdx"},{title:"Modeling GitHub",description:"An example of object to object relationships.",link:"../modeling/advanced/github",id:"../modeling/advanced/github.mdx"}],mdxType:"RelatedSection"}))}h.isMDXComponent=!0}}]);