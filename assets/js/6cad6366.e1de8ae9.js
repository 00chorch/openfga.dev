"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[1489],{6368:function(t,e,n){n.r(e),n.d(e,{assets:function(){return m},contentTitle:function(){return d},default:function(){return N},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return s}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),i=n(80966),o=["components"],p={title:"Setup OpenFGA Server",description:"Setup the OpenFGA server",sidebar_position:1,slug:"/getting-started/setup-openfga"},d="Setup OpenFGA Server",u={unversionedId:"content/getting-started/setup-openfga",id:"content/getting-started/setup-openfga",title:"Setup OpenFGA Server",description:"Setup the OpenFGA server",source:"@site/docs/content/getting-started/setup-openfga.mdx",sourceDirName:"content/getting-started",slug:"/getting-started/setup-openfga",permalink:"/docs/getting-started/setup-openfga",draft:!1,editUrl:"https://github.com/openfga/openfga.dev/edit/main/docs/content/getting-started/setup-openfga.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Setup OpenFGA Server",description:"Setup the OpenFGA server",sidebar_position:1,slug:"/getting-started/setup-openfga"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Install SDK Client",permalink:"/docs/getting-started/install-sdk"}},m={},s=[{value:"Step By Step",id:"step-by-step",level:2},{value:"Configuring The Server",id:"configuring-the-server",level:2},{value:"Configuring Data Storage",id:"configuring-data-storage",level:3},{value:"Configuring Authentication",id:"configuring-authentication",level:3},{value:"Production Recommendations",id:"production-recommendations",level:2}],g={toc:s};function N(t){var e=t.components,n=(0,r.Z)(t,o);return(0,l.kt)("wrapper",(0,a.Z)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"setup-openfga-server"},"Setup OpenFGA Server"),(0,l.kt)(i.AH,{mdxType:"DocumentationNotice"}),(0,l.kt)("p",null,"This article explains how to start your own OpenFGA server using Docker, and how to configure it."),(0,l.kt)("h2",{id:"step-by-step"},"Step By Step"),(0,l.kt)("p",null,"If you want to run OpenFGA locally as a Docker container, follow these steps:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Install Docker")," if Docker was not already installed."),(0,l.kt)("li",{parentName:"ol"},"Run ",(0,l.kt)("inlineCode",{parentName:"li"},"docker pull openfga/openfga")," to get the latest docker image."),(0,l.kt)("li",{parentName:"ol"},"Run ",(0,l.kt)("inlineCode",{parentName:"li"},"docker run -p 8080:8080 openfga/openfga run"),".")),(0,l.kt)("p",null,"This will start an HTTP server and gRPC server with the default configuration options."),(0,l.kt)("h2",{id:"configuring-the-server"},"Configuring The Server"),(0,l.kt)("p",null,"There are several configuration options for OpenFGA. One option is to pass them in with an environment file. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$ cat ./myenv\nOPENFGA_DATASTORE_ENGINE=postgres\nOPENFGA_AUTH_PRESHARED_KEYS=key1,key2\n# etc\n\n$ docker run --env-file ./myenv openfga/openfga run\n")),(0,l.kt)("p",null,"All the possible configuration options are:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Configuration name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default value"),(0,l.kt)("th",{parentName:"tr",align:null},"Example"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_AUTH_METHOD"),(0,l.kt)("td",{parentName:"tr",align:null},"The authentication method chosen."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"enum: ","[none, preshared]"),(0,l.kt)("td",{parentName:"tr",align:null},"none"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_AUTH_PRESHARED_KEYS"),(0,l.kt)("td",{parentName:"tr",align:null},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"OPENFGA_AUTH_METHOD=preshared"),", this is the array of accepted keys. You must specify at least one."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"array of string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"key1,key2"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_CHANGELOG_HORIZON_OFFSET"),(0,l.kt)("td",{parentName:"tr",align:null},"This applies only to the ReadChanges API. It's a duration in minutes. For example, if set to 1 minute, if you call the ReadChanges API, the changes that occurred in the last minute will not be included in the response."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_CORS_ALLOWED_ORIGINS"),(0,l.kt)("td",{parentName:"tr",align:null},"If specified, the HTTP server will only allowed specific origins for cross origin resource sharing."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"array of string"),(0,l.kt)("td",{parentName:"tr",align:null},"*"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"http://localhost,http://api.openfga.example"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_CORS_ALLOWED_HEADERS"),(0,l.kt)("td",{parentName:"tr",align:null},"If specified, the HTTP server will check whether the Access-Control-Request-Headers is a member of the OPENFGA_CORS_ALLOWED_HEADERS during the pre-flight check."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"array of string"),(0,l.kt)("td",{parentName:"tr",align:null},"*"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Origin,Accept,Content-Type,X-Requested-With"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_DATASTORE_CONNECTION_URI"),(0,l.kt)("td",{parentName:"tr",align:null},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"OPENFGA_DATASTORE_ENGINE=postgres"),", this is the connection URI to the database."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"postgres://user:password@localhost:5432/database"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_DATASTORE_ENGINE"),(0,l.kt)("td",{parentName:"tr",align:null},"This is where your data (tuples, authorization models, etc.) will live."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"enum: ","[memory, postgres]"),(0,l.kt)("td",{parentName:"tr",align:null},"memory"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_DATASTORE_MAX_CACHE_SIZE"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum number of type definitions to store in a cache. This improves the latency of some APIs."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"100000"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_GRPC_TLS_CERT_PATH"),(0,l.kt)("td",{parentName:"tr",align:null},"The path to the gRPC server certificate."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"./certs/grpc_server.pem"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_GRPC_TLS_ENABLED"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether or not to enable TLS for the gRPC server. If ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," then you must also set ",(0,l.kt)("inlineCode",{parentName:"td"},"OPENFGA_GRPC_TLS_CERT_PATH")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"OPENFGA_GRPC_TLS_KEY_PATH"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_GRPC_TLS_KEY_PATH"),(0,l.kt)("td",{parentName:"tr",align:null},"The path to the gRPC server private key."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"./certs/grpc_server_key.pem"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_HTTP_ENABLED"),(0,l.kt)("td",{parentName:"tr",align:null},"Enables or disables the HTTP server."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"true")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_HTTP_ADDR"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP address and port where OpenFGA will run."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},":8080"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_HTTP_TLS_CERT_PATH"),(0,l.kt)("td",{parentName:"tr",align:null},"The path to the HTTP server certificate."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"./certs/http_server.pem"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_HTTP_TLS_ENABLED"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether or not to enable TLS for the HTTP server. If ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," then you must also set ",(0,l.kt)("inlineCode",{parentName:"td"},"OPENFGA_HTTP_TLS_CERT_PATH")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"OPENFGA_HTTP_TLS_KEY_PATH"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_HTTP_TLS_KEY_PATH"),(0,l.kt)("td",{parentName:"tr",align:null},"The path to the HTTP server private key."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"./certs/http_server_key.pem"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_MAX_TUPLES_PER_WRITE"),(0,l.kt)("td",{parentName:"tr",align:null},"Maximum number of tuples that a Write request can accept. This may have to be set depending on your storage choice."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"100"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_MAX_TYPES_PER_AUTHORIZATION_MODEL"),(0,l.kt)("td",{parentName:"tr",align:null},"Maximum number of types that an authorization model can have."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"100"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_REQUEST_TIMEOUT"),(0,l.kt)("td",{parentName:"tr",align:null},"Limit of time, in seconds, that a request can take before it times out. If zero, there is no timeout."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"0s"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_RESOLVE_NODE_LIMIT"),(0,l.kt)("td",{parentName:"tr",align:null},"A number that indicates how deeply nested an authorization model can be. For example, if a type ",(0,l.kt)("inlineCode",{parentName:"td"},"document")," has relations ",(0,l.kt)("inlineCode",{parentName:"td"},"reader")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"writer"),", the latter which is defined as ",(0,l.kt)("inlineCode",{parentName:"td"},"define writer as reader"),", this authorization model has 2 levels."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"25"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_RPC_ADDR"),(0,l.kt)("td",{parentName:"tr",align:null},"RPC address and port where OpenFGA will run."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},":8081"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"OPENFGA_SERVICE_NAME"),(0,l.kt)("td",{parentName:"tr",align:null},"The name you want to give to your OpenFGA server."),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"openfga"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"configuring-data-storage"},"Configuring Data Storage"),(0,l.kt)("p",null,"You can choose between two storage options:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In-memory storage. This option is not persistent, i.e. if you restart the server, the data will be lost."),(0,l.kt)("li",{parentName:"ul"},"Postgres database. This option requires either a local Postgres installation, or a Docker container that runs Postgres. For an example of a Docker setup that includes a Postgres database, see ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/openfga/openfga/blob/main/docker-compose.yaml"},"OpenFGA's Docker compose file"),".")),(0,l.kt)("h3",{id:"configuring-authentication"},"Configuring Authentication"),(0,l.kt)("p",null,"You can configure authentication in your OpenFGA server in two ways: no authentication (the default) or pre-shared key authentication."),(0,l.kt)("p",null,"If using ",(0,l.kt)("strong",{parentName:"p"},"Pre-shared key authentication"),", you will configure OpenFGA with a secret key and your application calling OpenFGA will have to set an ",(0,l.kt)("inlineCode",{parentName:"p"},"Authorization: Bearer <YOUR-KEY-HERE>")," header. You can configure multiple keys."),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Warning")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"If you are going to use this setup in production, you should enable TLS in your OpenFGA server."))),(0,l.kt)("h2",{id:"production-recommendations"},"Production Recommendations"),(0,l.kt)("p",null,"If you have tried OpenFGA locally, decided it works as expected, and now want to deploy it to production, we recommend the following preparation:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Update the configuration as follows:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Configure authentication on the server as explained above."),(0,l.kt)("li",{parentName:"ul"},"Enable TLS on the server."),(0,l.kt)("li",{parentName:"ul"},"Enable production logging by changing the ",(0,l.kt)("inlineCode",{parentName:"li"},"OPENFGA_LOG_FORMAT")," environment variable to ",(0,l.kt)("inlineCode",{parentName:"li"},"json"),"."))),(0,l.kt)("li",{parentName:"ul"},"Add a rate limiter interceptor (for example, ",(0,l.kt)("a",{parentName:"li",href:"https://pkg.go.dev/github.com/openfga/openfga/server#Config"},"in the server configuration"),") that protects your OpenFGA server against bursts in traffic."),(0,l.kt)("li",{parentName:"ul"},"Add a logger interceptor (for example, ",(0,l.kt)("a",{parentName:"li",href:"https://pkg.go.dev/github.com/openfga/openfga/server#Config"},"in the server configuration"),") that sends logs to your logging platform of choice.")))}N.isMDXComponent=!0}}]);