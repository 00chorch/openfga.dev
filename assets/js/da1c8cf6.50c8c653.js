"use strict";(self.webpackChunkopenfga_dev=self.webpackChunkopenfga_dev||[]).push([[3603],{60720:function(e,t,o){o.r(t),o.d(t,{assets:function(){return d},contentTitle:function(){return m},default:function(){return c},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var i=o(87462),n=o(63366),a=(o(67294),o(3905)),r=o(80566),s=["components"],l={title:"GitHub",description:"Modeling GitHub permissions",sidebar_position:2,slug:"/modeling/advanced/use-cases/github"},m="Modeling GitHub permissions with <ProductName format={ProductNameFormat.ShortForm}/>",p={unversionedId:"content/modeling/advanced/use-cases/github",id:"content/modeling/advanced/use-cases/github",title:"GitHub",description:"Modeling GitHub permissions",source:"@site/docs/content/modeling/advanced/use-cases/github.mdx",sourceDirName:"content/modeling/advanced/use-cases",slug:"/modeling/advanced/use-cases/github",permalink:"/openfga.dev/modeling/advanced/use-cases/github",draft:!1,editUrl:"https://github.com/openfga/openfga.dev/edit/main/docs/content/modeling/advanced/use-cases/github.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"GitHub",description:"Modeling GitHub permissions",sidebar_position:2,slug:"/modeling/advanced/use-cases/github"},sidebar:"docs",previous:{title:"Google Drive",permalink:"/openfga.dev/modeling/advanced/use-cases/gdrive"},next:{title:"Slack",permalink:"/openfga.dev/modeling/advanced/use-cases/slack"}},d={},u=[{value:"Before You Start",id:"before-you-start",level:2},{value:"<ProductName format={ProductNameFormat.ShortForm}/> Concepts",id:"-concepts",level:3},{value:"Modeling Concentric Relationships",id:"modeling-concentric-relationships",level:4},{value:"Modeling Object-to-Object Relationships",id:"modeling-object-to-object-relationships",level:4},{value:"Concepts &amp; Configuration Language",id:"concepts--configuration-language",level:4},{value:"What You Will You Be Modeling",id:"what-you-will-you-be-modeling",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Defined Scenarios",id:"defined-scenarios",level:3},{value:"Modeling GitHub&#39;s Permissions",id:"modeling-githubs-permissions",level:2},{value:"01. Permissions for individuals in an org",id:"01-permissions-for-individuals-in-an-org",level:3},{value:"02. Permissions for teams in an org",id:"02-permissions-for-teams-in-an-org",level:3},{value:"03. Permissions for child teams in an org",id:"03-permissions-for-child-teams-in-an-org",level:3},{value:"04. Base permissions for org members",id:"04-base-permissions-for-org-members",level:3},{value:"Summary",id:"summary",level:2}],h={toc:u};function c(e){var t=e.components,l=(0,n.Z)(e,s);return(0,a.kt)("wrapper",(0,i.Z)({},h,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"modeling-github-permissions-with-"},"Modeling GitHub permissions with ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"})),(0,a.kt)(r.AH,{mdxType:"DocumentationNotice"}),(0,a.kt)("p",null,"This tutorial explains how to model GitHub's Organization permission model using ",(0,a.kt)(r.rZ,{format:r.v7.ProductLink,mdxType:"ProductName"}),". ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/managing-access-to-your-organizations-repositories"},"This article")," from the GitHub docs has links to all other articles we are going to be exploring in this document."),(0,a.kt)(r.S1,{title:"What you will learn",mdxType:"CardBox"},(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Indicate ",(0,a.kt)(r.uH,{section:"what-is-a-relationship",linkName:"relationships",mdxType:"ProductConcept"})," between a group of ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)(r.uH,{section:"what-is-a-user",linkName:"users",mdxType:"ProductConcept"}))," and an ",(0,a.kt)("strong",{parentName:"li"},(0,a.kt)(r.uH,{section:"what-is-an-object",linkName:"object",mdxType:"ProductConcept"})),". See ",(0,a.kt)("a",{parentName:"li",href:"/openfga.dev/modeling/basics/user-groups"},"Modeling User Groups")," for more details.",(0,a.kt)("br",null),"\nUsed here to indicate that all members of an organization are repository admins on the organization."),(0,a.kt)("li",{parentName:"ul"},"Modeling ",(0,a.kt)("strong",{parentName:"li"},"concentric relationship")," to have a certain ",(0,a.kt)(r.uH,{section:"what-is-a-relation",linkName:"relation",mdxType:"ProductConcept"})," on an object imply another relation on the same object. See ",(0,a.kt)("a",{parentName:"li",href:"/openfga.dev/modeling/concepts/concentric-relationships"},"Modeling Concepts: Concentric Relationships")," for more.",(0,a.kt)("br",null),"\nUsed here to indicate that maintainers of a repository are also writers of that repository."),(0,a.kt)("li",{parentName:"ul"},"Using ",(0,a.kt)("a",{parentName:"li",href:"/openfga.dev/modeling/configuration-language#the-union-operator"},(0,a.kt)("strong",{parentName:"a"},"the union operator"))," condition to indicate that a user might have a certain relation with an object if they match any of the criteria indicated.",(0,a.kt)("br",null),"\nUsed here to indicate that a user can be a reader on a repository, or can have the reader relationship implied through triager."),(0,a.kt)("li",{parentName:"ul"},"Model ",(0,a.kt)("a",{parentName:"li",href:"/openfga.dev/modeling/basics/parent-child"},(0,a.kt)("strong",{parentName:"a"},"parent-child objects"))," to indicate that a user having a relationship with a certain object implies having a relationship with another object in ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"}),".",(0,a.kt)("br",null),"\nUsed here to indicate that a repository admin on a GitHub organization, is an admin on all repositories that organization owns."))),(0,a.kt)(r.XQ,{title:"GitHub",preset:"github",example:"GitHub",store:"github",mdxType:"Playground"}),(0,a.kt)("h2",{id:"before-you-start"},"Before You Start"),(0,a.kt)("p",null,"In order to understand this guide correctly you must be familiar with some ",(0,a.kt)(r.rZ,{format:r.v7.LongForm,mdxType:"ProductName"})," concepts and know how to develop the things that we will list below."),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",{id:"-concepts"},(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"})," Concepts"),(0,a.kt)("p",null,"It would be helpful to have an understanding of some concepts of ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"})," before you start.")),(0,a.kt)("h4",{id:"modeling-concentric-relationships"},"Modeling Concentric Relationships"),(0,a.kt)("p",null,"You need to know how to update the authorization model to allow having nested relations such as all writers are readers. ",(0,a.kt)("a",{parentName:"p",href:"/openfga.dev/modeling/concepts/concentric-relationships"},"Learn more \u2192")),(0,a.kt)("h4",{id:"modeling-object-to-object-relationships"},"Modeling Object-to-Object Relationships"),(0,a.kt)("p",null,"You need to know how to create relationships between objects and how that might affect a user's relationships to those objects. ",(0,a.kt)("a",{parentName:"p",href:"/openfga.dev/modeling/concepts/object-to-object-relationships"},"Learn more \u2192")),(0,a.kt)("p",null,"Used here to indicate that users who have repo admin access on an organization, have admin access to all repositories owned by that organization."),(0,a.kt)("h4",{id:"concepts--configuration-language"},"Concepts & Configuration Language"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Some ",(0,a.kt)(r.uH,{mdxType:"ProductConcept"})),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/openfga.dev/modeling/configuration-language"},"Configuration Language")))),(0,a.kt)("h2",{id:"what-you-will-you-be-modeling"},"What You Will You Be Modeling"),(0,a.kt)("p",null,"GitHub is a system to develop and collaborate on code."),(0,a.kt)("p",null,"In this tutorial, you will build a subset of the GitHub permission model (detailed below) in ",(0,a.kt)(r.rZ,{format:r.v7.LongForm,mdxType:"ProductName"}),", using some scenarios to validate the model."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: For brevity, this tutorial will not model all of GitHub's permissions. Instead, it will focus on modeling for the scenarios outlined below")),(0,a.kt)("h3",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,"GitHub's permission model is represented in ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/organizations/managing-access-to-your-organizations-repositories/repository-roles-for-an-organization#repository-access-for-each-permission-level"},"their documentation"),"."),(0,a.kt)("p",null,"In this tutorial, you will be focusing on a subset of these permissions."),(0,a.kt)("p",null,"Requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Users can be admins, maintainers, writers, triagers or readers of repositories (each level inherits all access of the level lower than it. e.g. admins inherit maintainer access and so forth)"),(0,a.kt)("li",{parentName:"ul"},"Teams can have members"),(0,a.kt)("li",{parentName:"ul"},"Organizations can have members"),(0,a.kt)("li",{parentName:"ul"},"Organizations can own repositories"),(0,a.kt)("li",{parentName:"ul"},"Users can have repository admin access on organizations, and thus have admin access to all repositories owned by that organization")),(0,a.kt)("h3",{id:"defined-scenarios"},"Defined Scenarios"),(0,a.kt)("p",null,"There will be the following users:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Anne"),(0,a.kt)("li",{parentName:"ul"},"Beth"),(0,a.kt)("li",{parentName:"ul"},"Charles, a member of the contoso/engineering team"),(0,a.kt)("li",{parentName:"ul"},"Diane, a member of the contoso/protocols team"),(0,a.kt)("li",{parentName:"ul"},"Erik, a member of the contoso org")),(0,a.kt)("p",null,"And these requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"members of the contoso/protocols team are members of the contoso/engineering team"),(0,a.kt)("li",{parentName:"ul"},"members of the contoso org are repo_admins on the org"),(0,a.kt)("li",{parentName:"ul"},"repo admins on the org are admins on all the repos the org owns")),(0,a.kt)("p",null,"There will be a:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"contoso/tooling repository, owned by the contoso org and of which Beth is a writer and Anne is a reader and members of the contoso/engineering team are admins")),(0,a.kt)("h2",{id:"modeling-githubs-permissions"},"Modeling GitHub's Permissions"),(0,a.kt)("h3",{id:"01-permissions-for-individuals-in-an-org"},"01. Permissions for individuals in an org"),(0,a.kt)("p",null,"GitHub has ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization"},"5 different permission levels for repositories"),":"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Image showing github permission levels",src:o(13159).Z,width:"1526",height:"886"})),(0,a.kt)("p",null,"At the end of this section we want to end up with the following permissions represented:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Image showing permissions",src:o(76677).Z,width:"940",height:"357"})),(0,a.kt)("p",null,"To represent permissions in ",(0,a.kt)(r.rZ,{format:r.v7.LongForm,mdxType:"ProductName"})," we use ",(0,a.kt)(r.uH,{section:"what-is-a-relation",linkName:"relations",mdxType:"ProductConcept"}),". For repository permissions we need to create the following ",(0,a.kt)(r.uH,{section:"what-is-an-authorization-model",linkName:"authorization model",mdxType:"ProductConcept"}),":"),(0,a.kt)(r.lG,{configuration:{type_definitions:[{type:"repo",relations:{reader:{this:{}},triager:{this:{}},writer:{this:{}},maintainer:{this:{}},admin:{this:{}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("p",null,"The ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"})," service determines if a ",(0,a.kt)(r.uH,{section:"what-is-a-user",linkName:"user",mdxType:"ProductConcept"})," has access to an ",(0,a.kt)(r.uH,{section:"what-is-an-object",linkName:"object",mdxType:"ProductConcept"})," by ",(0,a.kt)(r.uH,{section:"what-is-a-check-request",linkName:"checking",mdxType:"ProductConcept"})," if the user has a relation to that object. Let us examine one of those relations in detail:"),(0,a.kt)(r.lG,{configuration:{type_definitions:[{type:"repo",relations:{reader:{this:{}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},'Objects of type "repo" have users related to them as "reader" if those users belong to the userset of all users related to the repo as "reader"'))),(0,a.kt)("p",null,"If we want to say ",(0,a.kt)("inlineCode",{parentName:"p"},"anne")," is a reader of repository ",(0,a.kt)("strong",{parentName:"p"},"repo:contoso/tooling")," we had create this ",(0,a.kt)(r.uH,{section:"what-is-a-relationship-tuple",linkName:"relationship tuple",mdxType:"ProductConcept"}),":"),(0,a.kt)(r.Gb,{relationshipTuples:[{user:"anne",relation:"reader",object:"repo:contoso/tooling"}],mdxType:"WriteRequestViewer"}),(0,a.kt)("p",null,"We can now ",(0,a.kt)(r.uH,{section:"what-is-a-check-request",linkName:"ask",mdxType:"ProductConcept"})," ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"}),' "is ',(0,a.kt)("inlineCode",{parentName:"p"},"anne")," a reader of repository ",(0,a.kt)("strong",{parentName:"p"},"repo:contoso/tooling"),'?"'),(0,a.kt)(r.uT,{user:"anne",relation:"reader",object:"repo:contoso/tooling",allowed:!0,mdxType:"CheckRequestViewer"}),(0,a.kt)("p",null,"We could also say that ",(0,a.kt)("inlineCode",{parentName:"p"},"beth")," is a writer of the same repository:"),(0,a.kt)(r.Gb,{relationshipTuples:[{user:"beth",relation:"writer",object:"repo:contoso/tooling"}],mdxType:"WriteRequestViewer"}),(0,a.kt)("p",null,"And ask some questions to ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"}),":"),(0,a.kt)(r.uT,{user:"beth",relation:"writer",object:"repo:contoso/tooling",allowed:!0,mdxType:"CheckRequestViewer"}),(0,a.kt)(r.uT,{user:"beth",relation:"reader",object:"repo:contoso/tooling",allowed:!1,mdxType:"CheckRequestViewer"}),(0,a.kt)("p",null,"The first reply makes sense but the second one does not. Intuitively, if ",(0,a.kt)("inlineCode",{parentName:"p"},"beth")," was writer, she was also be a reader. In fact, GitHub explains this in ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#repository-access-for-each-permission-level"},"their documentation"),"\n",(0,a.kt)("img",{alt:"Showing various Github repo access level",src:o(18997).Z,width:"1176",height:"1608"})),(0,a.kt)("p",null,"To make ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"}),' aware of this "concentric" permission model we need to update our definitions:'),(0,a.kt)(r.lG,{configuration:{type_definitions:[{type:"repo",relations:{reader:{union:{child:[{this:{}},{computedUserset:{relation:"triager"}}]}},triager:{union:{child:[{this:{}},{computedUserset:{relation:"writer"}}]}},writer:{union:{child:[{this:{}},{computedUserset:{relation:"maintainer"}}]}},maintainer:{union:{child:[{this:{}},{computedUserset:{relation:"admin"}}]}},admin:{this:{}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("p",null,"Let us examine one of those relations in detail:"),(0,a.kt)(r.lG,{configuration:{type:"repo",relations:{reader:{union:{child:[{this:{}},{computedUserset:{relation:"triager"}}]}}}},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},'The users with a reader relationship to a certain object of type "repo" are any of:'),(0,a.kt)("ul",{parentName:"div"},(0,a.kt)("li",{parentName:"ul"},'the "readers": the set of users who are ',(0,a.kt)(r.uH,{section:"what-are-direct-and-implied-relationships",linkName:"directly related",mdxType:"ProductConcept"}),' to the repo as a "reader"'),(0,a.kt)("li",{parentName:"ul"},'the "triagers": the set of users who are related to the object as "triager"')))),(0,a.kt)("p",null,"With this simple update our model now supports nested definitions and now:"),(0,a.kt)(r.uT,{user:"beth",relation:"writer",object:"repo:contoso/tooling",allowed:!0,mdxType:"CheckRequestViewer"}),(0,a.kt)(r.uT,{user:"beth",relation:"reader",object:"repo:contoso/tooling",allowed:!0,mdxType:"CheckRequestViewer"}),(0,a.kt)("h3",{id:"02-permissions-for-teams-in-an-org"},"02. Permissions for teams in an org"),(0,a.kt)("p",null,"GitHub also supports ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/creating-a-team"},"creating teams in an organization"),", ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/adding-organization-members-to-a-team"},"adding members to a team")," and ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/managing-team-access-to-an-organization-repository"},"granting teams permissions, rather than individuals"),"."),(0,a.kt)("p",null,"At the end of this section we want to end up with the following permissions represented:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Image showing permissions",src:o(12691).Z,width:"940",height:"578"})),(0,a.kt)("p",null,"To add support for teams and memberships all we need to do is add this object to the ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"})," ",(0,a.kt)(r.uH,{section:"what-is-an-authorization-model",linkName:"authorization model",mdxType:"ProductConcept"}),":"),(0,a.kt)(r.lG,{configuration:{type_definitions:[{type:"team",relations:{member:{this:{}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("p",null,"Let us now create a team, add a member to it and make it an admin of ",(0,a.kt)("strong",{parentName:"p"},"repo:contoso/tooling")," by adding the following ",(0,a.kt)(r.uH,{section:"what-is-a-relationship-tuple",linkName:"relationship tuples",mdxType:"ProductConcept"}),":"),(0,a.kt)(r.Gb,{relationshipTuples:[{_description:"make charles a member of the contoso/engineering team",user:"charles",relation:"member",object:"team:contoso/engineering"},{_description:"make members of contoso/engineering team admins of contoso/tooling",user:"team:contoso/engineering#member",relation:"admin",object:"repo:contoso/tooling"}],mdxType:"WriteRequestViewer"}),(0,a.kt)("p",null,"The last relationship tuple introduces a new ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"}))," concept. A ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(r.uH,{section:"what-is-a-user",linkName:"userset",mdxType:"ProductConcept"})),". When the value of a user is formatted like this ",(0,a.kt)("strong",{parentName:"p"},"type:objectId#relation"),", ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"})," will automatically expand the userset into all its individual user identifiers:"),(0,a.kt)(r.uT,{user:"charles",relation:"admin",object:"repo:contoso/tooling",allowed:!0,mdxType:"CheckRequestViewer"}),(0,a.kt)("h3",{id:"03-permissions-for-child-teams-in-an-org"},"03. Permissions for child teams in an org"),(0,a.kt)("p",null,"GitHub also supports team nesting, ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/requesting-to-add-a-child-team"},'known as "child teams"'),". ",(0,a.kt)("strong",{parentName:"p"},"Child teams inherit the access permissions of the parent team."),"\nLet's say we have a ",(0,a.kt)("strong",{parentName:"p"},"protocols")," team that is part of the ",(0,a.kt)("strong",{parentName:"p"},"engineering"),". The simplest way to achieve the aforementioned requirement is just adding this ",(0,a.kt)(r.uH,{section:"what-is-a-relationship-tuple",linkName:"relationship tuple",mdxType:"ProductConcept"}),":"),(0,a.kt)(r.Gb,{relationshipTuples:[{user:"team:contoso/protocols#member",relation:"member",object:"team:contoso/engineering"}],mdxType:"WriteRequestViewer"}),(0,a.kt)("p",null,"which says that members of protocols are members of engineering."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note:")," this is enough and valid for our current requirements, and for other read cases allows determining members of the direct team vs sub teams as the latter come from ",(0,a.kt)("strong",{parentName:"p"},"team:contoso/protocols#member"),". If the #member relation should not be followed for use cases a different approach could be taken.")),(0,a.kt)("p",null,"We can now add a member to the protocols team and check that they are admins of the tooling repository."),(0,a.kt)(r.Gb,{relationshipTuples:[{_description:"make diane a member of the contoso/protocols team",user:"diane",relation:"member",object:"team:contoso/protocols"}],mdxType:"WriteRequestViewer"}),(0,a.kt)(r.uT,{user:"diane",relation:"admin",object:"repo:contoso/tooling",allowed:!0,mdxType:"CheckRequestViewer"}),(0,a.kt)("p",null,"At the end of this section ended with the following permissions represented:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Image showing permissions",src:o(89324).Z,width:"940",height:"925"})),(0,a.kt)("h3",{id:"04-base-permissions-for-org-members"},"04. Base permissions for org members"),(0,a.kt)("p",null,"In GitHub, ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/setting-base-permissions-for-an-organization"},'"you can can set base permissions that apply to all members of an organization when accessing any of the organization\'s repositories"'),". For our purposes this means that if:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"and")," contoso has a repository tooling"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"and"),' contoso has configured base permission to be "write"')),(0,a.kt)("p",null,"then ",(0,a.kt)("inlineCode",{parentName:"p"},"erik")," has write permissions to tooling."),(0,a.kt)("p",null,"Let us model that!"),(0,a.kt)("p",null,"At the end of this section we want to end up with the following permissions represented:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:o(45644).Z,width:"1205",height:"925"})),(0,a.kt)("p",null,"We need to introduce the notion of organization as a type, user organization membership and repository ownership as a relation. - It is worth calling that before this addition we were able to represent almost the entire GitHub repo permissions without adding the notion of organization to ",(0,a.kt)(r.rZ,{format:r.v7.ShortForm,mdxType:"ProductName"}),". Identifiers for users, repositories and teams were all that was necessary.\nLet us add support for organizations and membership. Hopefully this feels familiar by now:"),(0,a.kt)(r.lG,{configuration:{type_definitions:[{type:"org",relations:{member:{this:{}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("p",null,"And support for repositories having owners:"),(0,a.kt)(r.lG,{configuration:{type_definitions:[{type:"repo",relations:{reader:{union:{child:[{this:{}},{computedUserset:{relation:"triager"}}]}},triager:{union:{child:[{this:{}},{computedUserset:{relation:"writer"}}]}},writer:{union:{child:[{this:{}},{computedUserset:{relation:"maintainer"}}]}},maintainer:{union:{child:[{this:{}},{computedUserset:{relation:"admin"}}]}},admin:{this:{}},owner:{this:{}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},'Note the added "owner" relation, indicating that organizations can own repositories.'))),(0,a.kt)("p",null,"We can now make Erik a member of contoso and make contoso own ",(0,a.kt)("strong",{parentName:"p"},"contoso/tooling"),":"),(0,a.kt)(r.Gb,{relationshipTuples:[{user:"erik",relation:"member",object:"org:contoso"},{user:"org:contoso",relation:"owner",object:"repo:contoso/tooling"}],mdxType:"WriteRequestViewer"}),(0,a.kt)("p",null,'What we still lack is the ability to create "default permissions" for the organization and have those be considered when determining if a user has a particular relation to a repository. Let\'s start with the simplest case ',(0,a.kt)("strong",{parentName:"p"},"admin"),". We want to say that a user is a admin of a repo if either:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"[done]"," they have a repo admin relation (directly or through team membership)"),(0,a.kt)("li",{parentName:"ul"},"[pending]"," their organization is configured with ",(0,a.kt)("strong",{parentName:"li"},"repo_admin")," as the base permission")),(0,a.kt)("p",null,"We need a way to consider the organization members, not just direct relations to the repo when getting a check for:"),(0,a.kt)(r.uT,{user:"erik",relation:"admin",object:"repo:contoso/tooling",mdxType:"CheckRequestViewer"}),(0,a.kt)("p",null,"More details on this technique can be found in the section ",(0,a.kt)("a",{parentName:"p",href:"/openfga.dev/modeling/basics/parent-child"},"Modeling Parent-Child Objects"),"."),(0,a.kt)("p",null,"We express it like this:"),(0,a.kt)(r.lG,{configuration:{admin:{union:{child:[{this:{}},{tupleToUserset:{tupleset:{relation:"owner"},computedUserset:{relation:"repo_admin"}}}]}}},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},'The users with an admin relationship to a certain object of type "repo" are any of:'),(0,a.kt)("ul",{parentName:"div"},(0,a.kt)("li",{parentName:"ul"},'the "admins": the set of users who are ',(0,a.kt)(r.uH,{section:"what-are-direct-and-implied-relationships",linkName:"directly related",mdxType:"ProductConcept"}),' to the repo as an "admin"'),(0,a.kt)("li",{parentName:"ul"},'the "repository admins of the org that owns the repo": from the objects who are related to the doc as parent, return the sets of users who are related to those objects as "repo_admin"')),(0,a.kt)("p",{parentName:"div"},"What the added section is doing is:"),(0,a.kt)("ol",{parentName:"div"},(0,a.kt)("li",{parentName:"ol"},"read all relationship tuples related to repo:contoso/tooling as parent which returns:")),(0,a.kt)("p",{parentName:"div"},(0,a.kt)("inlineCode",{parentName:"p"},'[{ "object": "repo:contoso/tooling", "relation": "parent", "user": "org:contoso" }]')),(0,a.kt)("ol",{parentName:"div",start:2},(0,a.kt)("li",{parentName:"ol"},"for each relationship tuple read, return all usersets that match the following, returning tuples of shape:")),(0,a.kt)("p",{parentName:"div"},(0,a.kt)("inlineCode",{parentName:"p"},'{ "object": "org:contoso", "repo_admin", "user": ??? }')))),(0,a.kt)("p",null,"What should the ",(0,a.kt)("strong",{parentName:"p"},"users")," in those relationship tuples with ",(0,a.kt)("strong",{parentName:"p"},"???")," be?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Well:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If the base permission for org contoso is repo_admin then it should be ",(0,a.kt)("strong",{parentName:"li"},"org:contoso#member"),"."),(0,a.kt)("li",{parentName:"ul"},"If the base permission for org contoso is NOT repo_admin, then it should be empty (no relationship tuple)."))),(0,a.kt)("li",{parentName:"ul"},"Whenever the value of this dropdown changes:\n",(0,a.kt)("img",{parentName:"li",src:"https://docs.github.com/assets/images/help/organizations/base-permissions-drop-down.png",alt:"Selecting new permission level from base permissions drop-down"}),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Delete the previous relationship tuple and create a new one:",(0,a.kt)(r.Gb,{relationshipTuples:[{user:"org:contoso#member",relation:"repo_admin",object:"org:contoso"}],mdxType:"WriteRequestViewer"}))))),(0,a.kt)("p",null,"The updated authorization model looks like this:"),(0,a.kt)(r.lG,{configuration:{type_definitions:[{type:"repo",relations:{admin:{union:{child:[{this:{}},{tupleToUserset:{computedUserset:{relation:"admin"},tupleset:{relation:"owner"}}}]}},maintainer:{union:{child:[{this:{}},{computedUserset:{relation:"admin"}}]}},writer:{union:{child:[{this:{}},{computedUserset:{relation:"maintainer"}},{tupleToUserset:{computedUserset:{relation:"writer"},tupleset:{relation:"owner"}}}]}},triager:{union:{child:[{this:{}},{computedUserset:{relation:"writer"}}]}},reader:{union:{child:[{this:{}},{computedUserset:{relation:"triager"}},{tupleToUserset:{computedUserset:{relation:"reader"},tupleset:{relation:"owner"}}}]}},owner:{this:{}}}},{type:"org",relations:{owner:{this:{}},repo_admin:{this:{}}}}]},mdxType:"AuthzModelSnippetViewer"}),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"GitHub has a number of other permissions. You have ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-organizations-and-teams/permission-levels-for-an-organization"},"organization billing managers, users that can manage specific apps, etc"),". We might explore those in the future, but hopefully this blog post has shown you how you could represent those cases using ",(0,a.kt)(r.rZ,{format:r.v7.LongForm,mdxType:"ProductName"}),"."),(0,a.kt)(r.XQ,{title:"GitHub",preset:"github",example:"GitHub",store:"github",mdxType:"Playground"}))}c.isMDXComponent=!0},76677:function(e,t,o){t.Z=o.p+"assets/images/github-01-14b7cc249174f7311e651e9541c4527b.svg"},12691:function(e,t,o){t.Z=o.p+"assets/images/github-02-2eaa2dc691d0378f661d8ce52dfab5d4.svg"},89324:function(e,t,o){t.Z=o.p+"assets/images/github-03-7afa9c606e43a97e744eda1e1f201b02.svg"},45644:function(e,t,o){t.Z=o.p+"assets/images/github-04-6a9b8175f0c09f9ce3b843911c620693.svg"},13159:function(e,t,o){t.Z=o.p+"assets/images/github-permission-level-1059e9392f2d7126e8376f141d5bad84.svg"},18997:function(e,t,o){t.Z=o.p+"assets/images/github-repo-access-level-6c53de1088cef314d5d1de14a8634727.svg"}}]);